(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{257:function(t,a,s){"use strict";s.r(a);var e=s(2),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("git的常用操作")]),t._v(" "),s("h2",{attrs:{id:"创建仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建仓库"}},[t._v("#")]),t._v(" 创建仓库")]),t._v(" "),s("p",[t._v("创建仓库分为两种情况")]),t._v(" "),s("ol",[s("li",[t._v("直接克隆git服务器建好的仓库")]),t._v(" "),s("li",[t._v("本地先初始化仓库后管理git服务器仓库")])]),t._v(" "),s("h3",{attrs:{id:"直接克隆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接克隆"}},[t._v("#")]),t._v(" 直接克隆")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone git@git.github.com:xxx/xxxx.git\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" README.md\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" README.md\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"add README"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master   //-u是--set-upstream的简写目的是关联本地和远程本质\n")])])]),s("h3",{attrs:{id:"本地先初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地先初始化"}},[t._v("#")]),t._v(" 本地先初始化")]),t._v(" "),s("p",[t._v("这种情况需要初始化一个本地仓库，然后，将本地仓库的源指向服务器")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin git@opensource.github.com:qwe/qwe.git\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" README.md\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" README.md\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"add README"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master\n")])])]),s("h2",{attrs:{id:"创建分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建分支"}},[t._v("#")]),t._v(" 创建分支")]),t._v(" "),s("ol",[s("li",[t._v("以本地分支为基础创建分支")]),t._v(" "),s("li",[t._v("以远程分支为基础创建分支")])]),t._v(" "),s("h3",{attrs:{id:"以本地分支为基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#以本地分支为基础"}},[t._v("#")]),t._v(" 以本地分支为基础")]),t._v(" "),s("p",[t._v("创建分支时，以本地当前所在的分支为基础，创建分支")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branchName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("       //新建分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branchName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  //新建分支并切换到新分支\n")])])]),s("p",[t._v("这种情况如果你本地的分支有已commit但未提交的代码，会被一并clone过来")]),t._v(" "),s("h3",{attrs:{id:"以远程分支为基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#以远程分支为基础"}},[t._v("#")]),t._v(" 以远程分支为基础")]),t._v(" "),s("p",[t._v("创建分支时，可以指定远程某个分支为基础，创建分支，这种创建方式创建本地分支后，本地分支会自动与远程分支进行关联")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout --track origin/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branchName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("        //以远程分支为名创建本地分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branchName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" origin/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branchName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("    //可以指定本地分支名\n")])])]),s("h2",{attrs:{id:"提交代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交代码"}},[t._v("#")]),t._v(" 提交代码")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branchName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" //如果是需要推送到远程新的分支可以忽略这一步\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branchName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h2",{attrs:{id:"查看日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看日志"}},[t._v("#")]),t._v(" 查看日志")]),t._v(" "),s("h3",{attrs:{id:"常用参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用参数"}},[t._v("#")]),t._v(" 常用参数")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("--pretty=oneline")]),t._v("以一行显示")]),t._v(" "),s("li",[s("code",[t._v("-p")]),t._v("显示每个文件的详细信息")])]),t._v(" "),s("h3",{attrs:{id:"常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git log")]),t._v("查看所有历史")]),t._v(" "),s("li",[s("code",[t._v("git log <fileName>")]),t._v("查看某个文件的提交历史")]),t._v(" "),s("li",[s("code",[t._v("git show <commitHash>")]),t._v("查看某次commit的提交记录")]),t._v(" "),s("li",[s("code",[t._v("git log --graph")]),t._v("查看分支生命周期")])]),t._v(" "),s("h2",{attrs:{id:"代码回滚"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码回滚"}},[t._v("#")]),t._v(" 代码回滚")]),t._v(" "),s("h3",{attrs:{id:"git-reset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[t._v("#")]),t._v(" git reset")]),t._v(" "),s("p",[s("code",[t._v("git reset <commitHash>")]),t._v("将分支的头部指向这次commit，默认会将被撤销的commit记录保留在你的暂存区")]),t._v(" "),s("p",[s("code",[t._v("git reset --hard <commitHash>")]),t._v("被撤销的commit记录保留不会被保留")]),t._v(" "),s("h3",{attrs:{id:"git-revert"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-revert"}},[t._v("#")]),t._v(" git revert")]),t._v(" "),s("p",[s("code",[t._v("git revert <commitHash>")]),t._v("用一次相反的提交覆盖原来的代码，达到回滚的目的。这种方式更灵活，可以针对某一次的commit进行回滚")]),t._v(" "),s("h2",{attrs:{id:"分支合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支合并"}},[t._v("#")]),t._v(" 分支合并")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/6/27/16b97c2f40b5cd3a?w=800&h=422&f=png&s=127251",alt:""}})]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("当前所在分支为所需合并到的分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branchName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --no-ff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branchName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --squash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branchName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h3",{attrs:{id:"当发生冲突时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#当发生冲突时"}},[t._v("#")]),t._v(" 当发生冲突时")]),t._v(" "),s("ul",[s("li",[t._v("撤销这次合并，将分支初始化到合并前的状态\n"),s("code",[t._v("git merge --abort")])]),t._v(" "),s("li",[t._v("解决冲突后，"),s("code",[t._v("git add")]),t._v("命令把文件添加到暂存区。继续执行"),s("code",[t._v("git merge --continue")]),t._v("命令编辑新生成的提交的log信息。然后merge完成。")])]),t._v(" "),s("h2",{attrs:{id:"tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tag"}},[t._v("#")]),t._v(" tag")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag     //查看tag\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag test_tag c809ddbf83939a89659e51dc2a5fe183af384233//在某个commit 上打tag\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin test_tag//"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("本地tag推送到线上\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -d test_tag//本地删除tag\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin :refs/tags/test_tag//本地tag删除了，再执行该句，删除线上tag\n")])])]),s("h2",{attrs:{id:"一些其他的常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一些其他的常用命令"}},[t._v("#")]),t._v(" 一些其他的常用命令")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git checkout .")]),t._v("清除工作区所有尚未add的文件")]),t._v(" "),s("li",[s("code",[t._v("git checkout -- <fileName>")]),t._v("清除工作某个尚未add的文件")]),t._v(" "),s("li",[s("code",[t._v("git reset HEAD <fileName>")]),t._v("清除工作某个已add的文件")]),t._v(" "),s("li",[s("code",[t._v("git branch --set-upstream-to=origin/remote_branch your_branch")]),t._v("手动关联本地与远程分支")]),t._v(" "),s("li",[s("code",[t._v("git checkout --ours .")]),t._v("   当发生冲突时全部采用传入的修改")]),t._v(" "),s("li",[s("code",[t._v("git checkout --theirs .")]),t._v("当发生冲突时全部采用本地的修改")]),t._v(" "),s("li",[s("code",[t._v("git push origin --delete <branchName>")]),t._v("删除远程分支")]),t._v(" "),s("li",[s("code",[t._v("git diff <branchName> <branchName> --stat")]),t._v("查看两个分支有差异的文件")]),t._v(" "),s("li",[s("code",[t._v("git diff <branchName> <branchName> <fileName>")]),t._v("查看两个分支具体某个文件的差异")]),t._v(" "),s("li",[s("code",[t._v("git diff <branchName> <branchName>")]),t._v(" 查看两个分支所有文件的差异")]),t._v(" "),s("li",[s("code",[t._v("git remote update")]),t._v("获取远程最新分支")]),t._v(" "),s("li",[s("code",[t._v("git remote prune origin --dry-run")]),t._v("查看是否有已被删除的远程分支")]),t._v(" "),s("li",[s("code",[t._v("git remote prune origin")]),t._v(" 修剪远程已被删除的分支")]),t._v(" "),s("li",[s("code",[t._v("git commit --amend")]),t._v(" 修改最近一次的提交信息，并且将已add的修改合并到一个commit中")])]),t._v(" "),s("h2",{attrs:{id:"git-rebase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" git rebase")]),t._v(" "),s("p",[t._v("对"),s("strong",[t._v("commit")]),t._v("进行各种修改")]),t._v(" "),s("h3",{attrs:{id:"操作步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作步骤"}},[t._v("#")]),t._v(" 操作步骤")]),t._v(" "),s("ol",[s("li",[t._v("选择操作的起点位置，"),s("code",[t._v("git rebase -i SHA1")])]),t._v(" "),s("li",[t._v("指定每个节点的操作方式，保留/删除/修改/...，进入操作")]),t._v(" "),s("li",[t._v("进入下一步操作/终止操作，"),s("code",[t._v("git rebase --continue")]),t._v("，"),s("code",[t._v("git rebase --abort")])])]),t._v(" "),s("h3",{attrs:{id:"例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),s("p",[t._v("比如要修改B节点的commit信息，则需要进去B节点之前的A节点")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i A节点的hash值\n")])])]),s("p",[t._v("此时会进入一个交互窗口")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("pick B 0406b6\npick C 39a9c2\npick D 3131e0\n")])])]),s("p",[t._v("修改节点前对应的操作，然后保存，就可以对节点进行编辑")]),t._v(" "),s("p",[t._v("操作指令有：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("pick")]),t._v("，保留节点，不做任何变更")]),t._v(" "),s("li",[s("code",[t._v("edit")]),t._v("，保留节点，修改内容")]),t._v(" "),s("li",[s("code",[t._v("drop")]),t._v("，删除节点，删除本次提交")]),t._v(" "),s("li",[s("code",[t._v("reword")]),t._v("，保留节点，修改提交信息")]),t._v(" "),s("li",[s("code",[t._v("squash")]),t._v("，保留节点修改，并且与上一个节点合并，也就是两次提交并做一次")]),t._v(" "),s("li",[s("code",[t._v("fixup")]),t._v("，保留节点修改，忽略本次提交信息")]),t._v(" "),s("li",[s("code",[t._v("exec")]),t._v("，run command (the rest of the line) using shell")])]),t._v(" "),s("p",[t._v("用的比较多的是前三个，可以只关注前三个。我们需要修改下交互窗口的内容，改为（第二步）：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("+ edit B 0406b6\n- pick B 0406b6\npick C 39a9c2\npick D 3131e0\n")])])]),s("p",[t._v("上面是 diff，实际内容是：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("edit B 0406b6\npick C 39a9c2\npick D 3131e0\n")])])]),s("p",[t._v("此时会进入一个临时 git 分支，大致是这样：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0406b6"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n")])])]),s("p",[t._v("由于你告诉了 git 要对 B 节点就行修改，所以它就停在了 B 处理，等着你修改，此时，你可以通过 amend 命令修改提交信息：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0406b6"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入交互窗口，将 commit 信息修改为 push B")]),t._v("\n")])])]),s("p",[t._v("操作完成后，执行（第三步）：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --continue\n")])])]),s("p",[t._v("由于你告诉 git 只需要操作一个节点，所以它会回到最初的位置<当前>，否则的话，它会继续进入下一个临时 git 分支。当然，如果你进入第三步以后，突然又不想修改了，可以执行：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --skip\n")])])]),s("h2",{attrs:{id:"git-stash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-stash"}},[t._v("#")]),t._v(" git stash")]),t._v(" "),s("blockquote",[s("p",[t._v("git stash用于将当前工作区的修改暂存起来，就像堆栈一样，可以随时将某一次缓存的修改再重新应用到当前工作区。一旦用好了这个命令，会极大提高工作效率。")])]),t._v(" "),s("p",[t._v("注意："),s("code",[t._v("git stash")]),t._v("只可以暂存被"),s("code",[t._v("git")]),t._v("跟踪的文件，新建的文件无法被跟踪，需要先"),s("code",[t._v("git add")])]),t._v(" "),s("h3",{attrs:{id:"git-stash-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-2"}},[t._v("#")]),t._v(" git stash")]),t._v(" "),s("p",[t._v("将"),s("strong",[t._v("缓存区")]),t._v("的内容保存到"),s("strong",[t._v("暂存区")])]),t._v(" "),s("p",[s("code",[t._v("git stash")]),t._v("可以暂存多个内容")]),t._v(" "),s("h3",{attrs:{id:"git-stash-pop-stash-x"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-pop-stash-x"}},[t._v("#")]),t._v(" git stash pop stash@{x}")]),t._v(" "),s("p",[t._v("将"),s("strong",[t._v("暂存区")]),t._v("的弹出到"),s("strong",[t._v("缓存区")]),t._v("，弹出前，需要"),s("code",[t._v("git checkout")]),s("strong",[t._v("缓存区")]),t._v("和"),s("strong",[t._v("暂存区")]),t._v("冲突的内容")]),t._v(" "),s("p",[t._v("可指定"),s("code",[t._v("pop")]),t._v("某个"),s("strong",[t._v("暂存区")]),t._v("的内容")]),t._v(" "),s("h3",{attrs:{id:"git-stash-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-list"}},[t._v("#")]),t._v(" git stash list")]),t._v(" "),s("p",[t._v("查看"),s("strong",[t._v("暂存区")]),t._v("的内容列表")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list\nstash@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": WIP on master: ef3879c 新功能"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("小"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": a\nstash@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": WIP on master: ef3879c 新功能"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("小"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": a\n")])])]),s("h3",{attrs:{id:"git-stash-apply-stash-x"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-apply-stash-x"}},[t._v("#")]),t._v(" git stash apply stash@{x}")]),t._v(" "),s("p",[t._v("使用指定一个"),s("strong",[t._v("暂存区")]),t._v("的内容")]),t._v(" "),s("h3",{attrs:{id:"git-stash-show-stash-x"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-show-stash-x"}},[t._v("#")]),t._v(" git stash show stash@{x}")]),t._v(" "),s("p",[t._v("查看某个"),s("strong",[t._v("暂存区")]),t._v("的内容。默认查看第一个")]),t._v(" "),s("p",[t._v("加上"),s("code",[t._v("-p")]),t._v("可以查看详情")]),t._v(" "),s("h3",{attrs:{id:"git-stash-save"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-save"}},[t._v("#")]),t._v(" git stash save")]),t._v(" "),s("p",[t._v("将内容保存到"),s("strong",[t._v("暂存区")]),t._v("时打上一个标记，方便查找")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash save "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),t._v("\n")])])]),s("h3",{attrs:{id:"git-stash-drop-stash-x"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-drop-stash-x"}},[t._v("#")]),t._v(" "),s("strong",[t._v("git stash drop")]),t._v(" stash@{x}")]),t._v(" "),s("p",[t._v("丢弃"),s("strong",[t._v("暂存区")]),t._v("的内容，从列表中删除这个存储")]),t._v(" "),s("h3",{attrs:{id:"git-stash-clear"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-clear"}},[t._v("#")]),t._v(" git stash clear")]),t._v(" "),s("p",[t._v("删除所有缓存的"),s("code",[t._v("stash")])])])}),[],!1,null,null,null);a.default=r.exports}}]);