(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{284:function(n,e,t){"use strict";t.r(e);var a=t(2),r=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"javascript设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript设计模式"}},[n._v("#")]),n._v(" JavaScript设计模式")]),n._v(" "),t("p",[n._v("日期：2018-7-17")]),n._v(" "),t("h2",{attrs:{id:"创建型设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建型设计模式"}},[n._v("#")]),n._v(" 创建型设计模式")]),n._v(" "),t("h3",{attrs:{id:"工厂方法模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法模式"}},[n._v("#")]),n._v(" 工厂方法模式")]),n._v(" "),t("p",[n._v("通过"),t("code",[n._v("Factory")]),n._v("可以实例化不同类型的实例")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var Factory = function (type, content) {\n    if (!(this instanceof Factory)) {\n        throw '请使用new关键词来创建';\n    }\n    this._init(type);\n    var s = new this[type](content);\n    return s;\n}\n\nFactory.prototype = {\n    _init: function (type) {\n        // 所有通过Factory这个工厂创建的实例公用的方法\n        // this指向的是Factory\n        // this[type].prototype的作用是，把公用方法单独挂在到声明的实例下\n        this[type].prototype = {\n            createElem: function () {\n                return document.createElement('div')\n            },\n            addContent: function (content) {\n                this.elem.textContent = content;\n                return this;\n            },\n            borderColor: function (style) {\n                this.elem.style.border = style;\n                return this;\n            },\n            appendElem: function () {\n                document.querySelector('#app').appendChild(this.elem);\n            }\n        }\n    },\n    // 这里定义的是Factory工厂下的实例\n    js: function (content) {\n        // 这里的this指向的是js这个方法\n        this.content = content;\n        this.elem = this.createElem();\n        this.addContent(content).borderColor('1px solid red').appendElem();\n    },\n    UI: function (content) {\n        this.content = content;\n        this.elem = this.createElem();\n        this.addContent(content).borderColor('1px solid blue').appendElem();\n    }\n}\n\nvar js = new Factory('js', 'js学习')\nvar ui = new Factory('UI', 'UI学习');\n")])])]),t("h3",{attrs:{id:"抽象工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂模式"}},[n._v("#")]),n._v(" 抽象工厂模式")]),n._v(" "),t("p",[n._v("在一些大型项目中，会有一些子类去集成父类，这些父类经常会定义一些必要的方法，却没有具体实现，一旦子类创建了这样一个对象，却没有重写这些方法，实例化对象便会调用父类中的这些方法，给一个友好的提示。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var VehicleFactory = function (subType, superType) {\n    if (typeof VehicleFactory[superType] === 'function') {\n        function F() {}\n        F.prototype = new VehicleFactory[superType]();\n        subType.constructor = subType;\n        subType.prototype = new F();\n    } else {\n        throw new Error('未创建该抽象类')\n    }\n}\n\nVehicleFactory.Car = function (params) {\n    this.type = 'car'\n}\n\nVehicleFactory.Car.prototype = {\n    getPrice:function (params) {\n        throw new Error('抽象方法不能调用')\n    },\n    getSpeed:function (params) {\n        throw new Error('抽象方法不能调用')\n    }\n}\n\nvar BMW = function (price,speed) {\n    this.price = price;\n    this.speed = speed;\n}   \nVehicleFactory(BMW,'Car');\nBMW.prototype.getPrice = function () {\n    return this.price;\n}\nBMW.prototype.getSpeed = function () {\n    return this.speed;\n}\nvar b = new BMW(1000,100)\nconsole.log(b.getPrice());\n")])])]),t("h3",{attrs:{id:"建造者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#建造者模式"}},[n._v("#")]),n._v(" 建造者模式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/* eslint-disable */\nvar Human = function (params) {\n    this.skill = params && params.skill || '保密';\n    this.hobby = params && params.hobby || '保密';\n}\nHuman.prototype = {\n    getSkill: function () {\n        return this.skill;\n    },\n    getHobby: function () {\n        return this.hobby;\n    }\n}\n\nvar Named = function (name) {\n    var that = this;\n    (function (name, that) {\n        that.wholeName = name;\n        var index = name.indexOf(' ');\n        if (index > -1) {\n            that.FirstName = name.slice(0, index);\n            that.SecondName = name.slice(index);\n        } else {\n            that.FirstName = name.slice(0, 1);\n            that.SecondName = name.slice(1);\n        }\n    })(name, that)\n}\n\nvar Work = function (work) {\n    var that = this;\n    (function (work, that) {\n        switch (work) {\n            case 'code':\n                that.work = '工程师';\n                that.workDescript = '每天沉迷于编程';\n                break;\n            case 'ue':\n                that.work = '设计师';\n                that.workDescript = '设计是一门艺术';\n                break;\n            default:\n                break;\n        }\n    })(work, that)\n}\n// 更换期望职位\nWork.prototype.changeWork = function (work) {\n    this.work = work;\n}\n// 添加对职位的描述\nWork.prototype.changeDescript = function (workDescript) {\n    this.workDescript = workDescript;\n}\n\nvar Person = function (name, work) {\n    this.Human = new Human();\n    this.name = new Named(name)\n    this.work = new Work(work)\n}\n\nvar person = new Person('小明', 'code')\nconsole.log(person);\n")])])]),t("h3",{attrs:{id:"原型模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型模式"}},[n._v("#")]),n._v(" 原型模式")]),n._v(" "),t("p",[n._v("把所有属性放在挂载到一个构造函数的"),t("code",[n._v("prototype")]),n._v("上实现继承")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/**\n * 把传入的对象放到原型链 prototype上\n * 通过new F();返回一个继承了prototype的对象\n */\nfunction prototypeExtend(params) {\n    var F = function () {}\n    var args = arguments;\n    var len = arguments.length;\n    for (var i = 0; i < len; i++) {\n        for (var j in args[i]) {\n            F.prototype[j] = args[i][j];\n        }\n    }\n    return new F();\n}\n\n// penguin\nvar penguin = prototypeExtend({\n    speed: 20,\n    swim: function (params) {\n        console.log('游泳速度' + this.speed);\n    }\n}, {\n    run: function (speed) {\n        console.log('奔跑速度' + speed);\n    }\n})\n\nconsole.log(penguin);\npenguin.swim()\npenguin.run(10)\n")])])]),t("h3",{attrs:{id:"单例模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[n._v("#")]),n._v(" 单例模式")]),n._v(" "),t("ol",[t("li",[n._v("定义命名空间")]),n._v(" "),t("li",[n._v("通过单例模式来管理代码库的各个模块")]),n._v(" "),t("li",[n._v("比如jquery就是使用的单例模式")]),n._v(" "),t("li",[n._v("它是一个允许实例化一次的对象，有时这么做也是为了节省系统资源")])]),n._v(" "),t("h2",{attrs:{id:"结构型设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结构型设计模式"}},[n._v("#")]),n._v(" 结构型设计模式")]),n._v(" "),t("h3",{attrs:{id:"外观模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#外观模式"}},[n._v("#")]),n._v(" 外观模式")]),n._v(" "),t("ol",[t("li",[n._v("解决兼容性问题")]),n._v(" "),t("li",[n._v("简化底层接口复杂性")])]),n._v(" "),t("h3",{attrs:{id:"适配器模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式"}},[n._v("#")]),n._v(" 适配器模式")]),n._v(" "),t("blockquote",[t("p",[n._v("服务器端数据适配\n这样如果服务器返回的数据有变化只需要修改适配器")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\nfunction ajaxData(data) {\n    return [\n        data['key1'],\n        data['key2'],\n        data['key3']\n    ]\n}\n\nvar data = {\n    key1:11111111,\n    key2:222222,\n    key3:333333\n} \nvar data_change = ajaxData(data);\nconsole.log(data_change);\n")])])]),t("h3",{attrs:{id:"代理模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代理模式"}},[n._v("#")]),n._v(" 代理模式")]),n._v(" "),t("ol",[t("li",[n._v("JSONP")]),n._v(" "),t("li",[n._v("代理模板")])]),n._v(" "),t("h3",{attrs:{id:"装饰者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#装饰者模式"}},[n._v("#")]),n._v(" 装饰者模式")]),n._v(" "),t("blockquote",[t("p",[n._v("对原有对象的属性与方法的添加")]),n._v(" "),t("p",[n._v("目的，避免对原有代码的修改。达到增加功能的目的")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var decorator = function (input, fn) {\n    var input = document.getElementById(input);\n    if (typeof input.onclick === 'function') {\n        // 缓存事件原有回调函数\n        var oldClickFn = input.onclick;\n        input.onclick = function () {\n            // 重写原来的点击事件\n            oldClickFn();\n            fn();\n        }\n    } else {\n        // 未绑定事件，则直接为其绑定事件\n        input.onclick = fn;\n    }\n}\n")])])]),t("h3",{attrs:{id:"桥接模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式"}},[n._v("#")]),n._v(" 桥接模式")]),n._v(" "),t("blockquote",[t("p",[n._v("提取事件与业务逻辑之间的共同点")]),n._v(" "),t("p",[n._v("搭建事件与业务逻辑之间的桥梁")]),n._v(" "),t("p",[n._v("实现事件与业务逻辑之间的解耦")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function changeColor(dom, color, bg) {\n    dom.style.color = color;\n    dom.style.background = bg;\n}\n\nvar spans = document.querySelectorAll('.span span')\nspans[0].onmouseover = function () {\n    changeColor(this, 'red', '#ddd')\n}\nspans[0].onmouseout = function () {\n    changeColor(this, '#333', '#f5f5f5')\n}\n")])])]),t("h3",{attrs:{id:"组合模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合模式"}},[n._v("#")]),n._v(" 组合模式")]),n._v(" "),t("blockquote",[t("p",[n._v("组合对象类通过继承同一个父类使其具有统一的方法")]),n._v(" "),t("p",[n._v("方便我们统一管理和使用")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function inheritObject(o) {\n    function F() {}\n    F.prototype = o;\n    return new F();\n}\n\nfunction inheritPrototype(child, parent) {\n    // 把原型链上的方法复制一份给child\n    var p = inheritObject(parent.prototype)\n    p.constructor = child;\n    child.prototype = p;\n}\n\nvar News = function () {\n    this.children = [];\n    this.element = null;\n}\n\nNews.prototype = {\n    init: function () {\n        throw new Error('1请重写你的方法')\n    },\n    add: function () {\n        throw new Error('2请重写你的方法')\n    },\n    getElement: function () {\n        throw new Error('3请重写你的方法')\n    },\n}\n\nvar Container = function (id, parent) {\n    News.call(this);\n    this.id = id;\n    this.parent = parent;\n    // this.init();\n}\n\ninheritPrototype(Container, News);\n")])])]),t("h2",{attrs:{id:"行为设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行为设计模式"}},[n._v("#")]),n._v(" 行为设计模式")]),n._v(" "),t("h3",{attrs:{id:"观察者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[n._v("#")]),n._v(" 观察者模式")]),n._v(" "),t("blockquote",[t("p",[n._v("发布——订阅模式或消息机制，定义了一种依赖关系，解决了主体对象和观察者之间的耦合")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('var Observe = (function() {\n  var _message = {};\n  return {\n  //注册器\n    regist: function(type, fn) {\n      if (typeof _message[type] === "undefined") {\n        _message[type] = [fn];\n      } else {\n        _message[type].push(fn);\n      }\n    },\n   //触发器\n    fire: function(type, args) {\n      if (!_message[type]) return;\n      var events = {\n          type: type,\n          args: args || {}\n        },\n        i = 0,\n        len = _message[type].length;\n      for (; i < len; i++) {\n        _message[type][i].call(this, events);\n      }\n    },\n    //销毁器\n    remove: function(type, fn) {\n      if (_message[type] instanceof Array) {\n        var i = _message[type].length - 1;\n        for (; i >= 0; i--) {\n          _message[type][i] === fn && _message[type].splice(i, 1);\n        }\n      }\n    }\n  };\n})();\n\nObserve.regist("test", function(e) {\n  console.log(e.type, e.args.msg);\n});\n\nObserve.fire("test", { msg: "hello world" });\n')])])]),t("h3",{attrs:{id:"状态模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#状态模式"}},[n._v("#")]),n._v(" 状态模式")]),n._v(" "),t("blockquote",[t("p",[n._v("有时候我们在写一个方法的时候，会根据传入的值，做许多判断")]),n._v(" "),t("p",[n._v("这样的代码，不易于拓展，也不易于维护")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//这样的代码不是我们想要的\n\nvar lastAction1 = ''\nvar lastAction2 = ''\n\nfunction changeMarry(action1, action2) {\n    if (action1 === 'jump') {\n\n    } else if (action1 === 'move') {\n\n    } else if (action1 === 'jump' && action2 === 'shoot') {\n        //跳跃中射击 \n    }\n    lastAction1 = action1;\n    lastAction2 = action2;\n}\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//这样的代码才是我们想要的\n\nvar changeMarry = function () {\n    var currentState = {};\n    // 状态方法\n    var states = {\n        jump: function () {\n            console.log('jump');\n        },\n        move: function () {\n            console.log('move');\n        },\n        shoot: function () {\n            console.log('shoot');\n        },\n    }\n    // 动作控制类\n    var action = {\n        changeState: function () {\n            // 可以传入多个状态\n            var arg = arguments;\n            currentState = {};\n            for (let action of arg) {\n                currentState[action] = true;\n            }\n            return this;\n        },\n        goes: function () {\n            for (let o in currentState) {\n                states[o] && states[o]();\n            }\n            return this;\n        }\n    }\n    return {\n        change: action.changeState,\n        goes: action.goes\n    }\n}\n\nvar marry = new changeMarry()\nmarry.change('jump', 'shoot').goes().goes()\n")])])]),t("h3",{attrs:{id:"策略模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[n._v("#")]),n._v(" 策略模式")]),n._v(" "),t("blockquote",[t("p",[n._v("一个简化版的状态模式")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var priceStrategy = function () {\n    var strategy = {\n        return30: function (price) {\n            return +price + parseInt(price / 100) * 30;\n        },\n        return50: function (price) {\n            return +price + parseInt(price / 100) * 50;\n        },\n        percent90: function (price) {\n            return price * 100 * 90 / 10000;\n        },\n        percent80: function (price) {\n            return price * 100 * 80 / 10000;\n        },\n        percent50: function (price) {\n            return price * 100 * 50 / 10000;\n        }\n    }\n    // 策略算法调用接口\n    return function (algo, price) {\n        return strategy[algo] && strategy[algo](price);\n    }\n}()\n\n\nvar price = priceStrategy('return50','314.67')\nconsole.log(price);\n\n")])])]),t("h3",{attrs:{id:"职责链模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#职责链模式"}},[n._v("#")]),n._v(" 职责链模式")]),n._v(" "),t("blockquote",[t("p",[n._v("把一个大的功能拆分成几个小的模块进行发开")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var dealData = function (data, dealType, dom) {\n    var dataType = Object.prototype.toString.call(data);\n    switch (dealType) {\n        case 'sug':\n            if (dataType === '[object Array]') {\n                return createSug(data, dom);\n            }\n\n            if (dataType === '[object Object]') {\n                var newData = [];\n                for (var i in data) {\n                    newData.push(data[i]);\n                }\n                return createSug(newData, dom);\n            }\n\n            return createSug([data], dom);\n        case 'validate':\n            return createValidateResult(data, dom);\n        default:\n            break;\n    }\n}\n\nvar createSug = function (data, dom) {\n    var i = 0,\n        len = data.length,\n        html = ''\n    for (; i < len; i++) {\n        html += '<li>' + data[i] + '</li>';\n    }\n    dom.parentNode.getElementsByTagName('ul')[0].innerHTML = html;\n}\n\nvar createValidateResult = function (data, dom) {\n    dom.parentNode.getElementsByTagName('span')[0].innerHTML = data;\n}\n\nvar input = document.querySelectorAll(\".tween input\");\ndealData(123,'sug',input[0])\ndealData(['爱奇艺','阿里巴巴','bilibili'],'sug',input[1])\n")])])]),t("h3",{attrs:{id:"访问者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问者模式"}},[n._v("#")]),n._v(" 访问者模式")]),n._v(" "),t("blockquote",[t("p",[n._v("解决数据与数据操作方法之间的耦合")]),n._v(" "),t("p",[n._v("适用于数据稳定，但是操作方法易变的场景")])]),n._v(" "),t("h3",{attrs:{id:"备忘录模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#备忘录模式"}},[n._v("#")]),n._v(" 备忘录模式")]),n._v(" "),t("blockquote",[t("p",[n._v("将请求过的数据保存在客户端")]),n._v(" "),t("p",[n._v("减少请求数目，优化用户体验")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var Page = function () {\n    var cache ={}\n    return function (page,fn) {\n        if(cache[page]){\n            // 页面在缓存中\n        }else{\n            // 页面不在缓存中\n            // 数据请求回来后将数据存储到cache中\n        }\n    }\n}\n")])])]),t("h3",{attrs:{id:"迭代器模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#迭代器模式"}},[n._v("#")]),n._v(" 迭代器模式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var Getter = function (object, key) {\n    if (!object) return undefined;\n    key = key.split('.')\n    let result;\n    try {\n        result = key.reduce((current, next) => {\n            return current[next];\n        }, object);\n    } catch (error) {\n        result = undefined;\n    }\n    return result;\n}\nvar obj = {\n    a: {\n        b: null\n    }\n}\n\n// var result = obj && obj.a && obj.b && obj.c || [];\nvar result = Getter(obj, 'a.b.c') || [];\n")])])]),t("h2",{attrs:{id:"技巧型设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#技巧型设计模式"}},[n._v("#")]),n._v(" 技巧型设计模式")]),n._v(" "),t("h3",{attrs:{id:"数据访问对象模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据访问对象模式"}},[n._v("#")]),n._v(" 数据访问对象模式")]),n._v(" "),t("blockquote",[t("p",[n._v("防止本地存储时，出现覆盖，并且可以设置过期时间")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var baseLocalStorage = function (preId, timeSign) {\n    this.preId = preId;\n    this.timeSign = timeSign || '-';\n}\n\nbaseLocalStorage.prototype = {\n    status: {\n        SUCCESS: 0,\n        FAILURE: 1,\n        OVERFLOW: 2,\n        TIMEOUT: 3,\n    },\n    storage: localStorage,\n    getKey: function (key) {\n        return this.preId + key\n    },\n    set: function (key, value, cb, time) {\n        var status = this.status.SUCCESS,\n            key = this.getKey(key);\n\n        try {\n            time = new Date(time).getTime() || time.getTime();\n        } catch (error) {\n            time = '-'\n        }\n        try {\n            this.storage.setItem(key, time + this.timeSign + value)\n        } catch (error) {\n            status = this.status.FAILURE\n        }\n        cb && cb.call(this, status, key, value);\n    }\n}\n")])])]),t("h3",{attrs:{id:"节流模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#节流模式"}},[n._v("#")]),n._v(" 节流模式")]),n._v(" "),t("blockquote",[t("p",[n._v("解决了页面中，因为交互造成事件重复触发的问题")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function throttle() {\n    var isClear = arguments[0],\n        fn;\n    if (isClear === true) {\n        fn = arguments[1]\n        fn.__throttleID && clearTimeout(fn.__throttleID)\n    } else {\n        // 第一个参数为函数\n        fn = arguments[0];\n        // 第二个参数为函数执行时的参数\n        var params = arguments[1];\n        var p = Object.assign({\n            context: null,\n            args: [],\n            time: 300\n        }, params)\n        // 清除定时器，会将上一个定时任务清除\n        throttle(true, fn);\n        fn.__throttleID = setTimeout(() => {\n            fn.apply(p.context, p.args)\n        }, p.time);\n    }\n}\n\nvar fn = function () {\n    console.log(arguments);\n}\nvar index = 0;\nwindow.addEventListener('scroll', function (e) {\n    index++\n    throttle(fn, {\n        args: [index]\n    })\n})\n")])])]),t("h3",{attrs:{id:"简单模板模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单模板模式"}},[n._v("#")]),n._v(" 简单模板模式")]),n._v(" "),t("blockquote",[t("p",[n._v("可以更加灵活高效的创建视图")]),n._v(" "),t("p",[n._v("mvc框架的 前端模板用的就是这种模式")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function formateString(str, data) {\n    return str.replace(/\\{#(\\w+)#\\}/g, function (match, key) {\n        return typeof data[key] === undefined ? \"\" : data[key];\n    })\n}\n\nvar liTpl = [\n    `<li>`,\n    `<strong> {#strong#}</strong>`,\n    `<span>{#span#}</span>`,\n    `</li>`\n].join('')\nvar data = {\n    strong: 'strong',\n    span: 'span'\n}\n\nvar html = formateString(liTpl, data)\nconsole.log(html);\ndocument.querySelector('#container').innerHTML = html\n")])])]),t("h3",{attrs:{id:"惰性模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#惰性模式"}},[n._v("#")]),n._v(" 惰性模式")]),n._v(" "),t("blockquote",[t("p",[n._v("减少不必要的分支判断")]),n._v(" "),t("p",[n._v("提高代码的执行效率")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function bindEvent() {}\nbindEvent.on = function (dom, type, fn) {\n    if (document.addEventListener) {\n        bindEvent.on = function (dom, type, fn) {\n            dom.addEventListener(type, fn, false)\n        }\n    }\n    bindEvent.on(dom, type, fn)\n}\nconsole.log(bindEvent.on);\n\nbindEvent.on(document.body, 'click', () => {\n    console.log(1111111);\n})\nconsole.log(bindEvent.on);\n")])])]),t("h3",{attrs:{id:"参与者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参与者模式"}},[n._v("#")]),n._v(" 参与者模式")]),n._v(" "),t("blockquote",[t("p",[n._v("运用参与者模式，使事件绑定功能更加完善")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var btn = document.querySelector('#bind');\nvar p = document.querySelector('#bindP');\nvar bindFn = demoFn.bind(p,{name:11111111111})\nbtn.addEventListener('click', bindFn)\n")])])]),t("h3",{attrs:{id:"等待者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#等待者模式"}},[n._v("#")]),n._v(" 等待者模式")]),n._v(" "),t("blockquote",[t("p",[n._v("promise对象的实现")])]),n._v(" "),t("p",[n._v("实现逻辑：")]),n._v(" "),t("ol",[t("li",[n._v("在一个实例内维护这多个方法的状态")]),n._v(" "),t("li",[n._v("每当有一个方法的状态发生变化，遍历一遍所以方法的状态")]),n._v(" "),t("li",[n._v("如果有其余方法状态为false，则不执行任何回调继续等待")]),n._v(" "),t("li",[n._v("如果其余方法状态都为true，则执行成功回调")]),n._v(" "),t("li",[n._v("如果遍历到有方法为false，则立即执行失败回调")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var Waiter = function () {\n    // 注册了的等待对象容器\n    var dfd = [],\n        dataList = [],\n        // 成功回调\n        doneArr = [],\n        // 失败回调\n        failArr = [],\n        // slice = Array.prototype.slice,\n        that = this;\n    var promise = function () {\n        this.resolved = false;\n        this.rejected = false;\n    }\n    promise.prototype = {\n        // 成功\n        resolve: function (data) {\n            // 把当前状态修改为true；\n            this.resolved = true;\n            dataList.push(data);\n            // 如果有失败则监听对象会被清空\n            if (!dfd.length) return;\n            // 查看dfd中其余方法的状态，如果其余状态已完成则删除该状态，避免下次再遍历\n            for (let i = dfd.length - 1; i >= 0; i--) {\n                if (dfd[i] && !dfd[i].resolved || dfd[i].rejected) return;\n                dfd.splice(i, 1);\n            }\n            // 执行成功回调方法\n            _exec(doneArr, dataList);\n        },\n        // 失败\n        reject: function () {\n            this.rejected = true;\n            if (!dfd.length) return;\n            // 有失败则清空监听对象\n            dfd.splice(0);\n            // 执行失败回调方法\n            _exec(failArr);\n        }\n    }\n    // 创建监控对象\n    that.Deferred = function () {\n        return new promise();\n    }\n    // 回调执行方法\n    function _exec(arr,dataList) {\n        let i = 0,\n            len = arr.length;\n        for (; i < len; i++) {\n            arr[i] && arr[i].apply(null, [dataList]);\n        }\n    }\n\n    // 监控异步方法\n    that.when = function () {\n        // 将需要监听的对象保存到dfd中\n        dfd = Array.from(arguments);\n        var i = dfd.length;\n        // 如果不存在监控对象，或者监控对象已解决则退出\n        for (--i; i >= 0; i--) {\n            if (!dfd[i] || dfd[i].resolved || dfd[i].rejected || !dfd[i] instanceof promise) {\n                dfd.splice(i, 1);\n            }\n        }\n        return that;\n    }\n\n    // 解决成功回调函数，将传入的fn数组合并到doneArr\n    that.done = function () {\n        doneArr = doneArr.concat(Array.from(arguments))\n        return that;\n    }\n    // 解决失败回调函数，将传入的fn数组合并到failArr\n    that.fail = function () {\n        failArr = failArr.concat(Array.from(arguments))\n        return that;\n    }\n\n}\nvar waiter = new Waiter();\n\nvar first = function () {\n    var dfd = waiter.Deferred();\n    setTimeout(() => {\n        console.log('11111111');\n        dfd.resolve('ajklsdhasjkdhasjkd');\n    }, 1000);\n    return dfd;\n}\n\nvar second = function () {\n    var dfd = waiter.Deferred();\n    setTimeout(() => {\n        console.log('22222222');\n        dfd.resolve('asjkdhajksdhasjkdh');\n    }, 2000);\n    return dfd;\n}\n\nwaiter.when(first(), second()).done((dataList) => {\n    console.log(dataList);\n})\n")])])]),t("h2",{attrs:{id:"架构型设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构型设计模式"}},[n._v("#")]),n._v(" 架构型设计模式")]),n._v(" "),t("h3",{attrs:{id:"同步模块模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同步模块模式"}},[n._v("#")]),n._v(" 同步模块模式")]),n._v(" "),t("blockquote",[t("p",[n._v("采用单例模式")]),n._v(" "),t("p",[n._v("模块全都通过define方法挂在在F这个对象下")]),n._v(" "),t("p",[n._v("通过module方法，解析所需要的模块，传入回调函数中")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var F = F || {}\n\n// 定义模块的方法\n// 模块全都通过define方法挂在在F这个对象下\nF.define = function (str, fn) {\n    // 解析模块路由\n    var parts = str.split('.'),\n        old = parent = this,\n        // i 模块层级，len模块层级长度\n        len = 0,\n        i = 0\n    // 如果第一个模式使模块管理器单体对象，则移除\n    if (parts[0] === 'F') {\n        parts.splice(0, 1);\n    }\n    // 屏蔽对define与module模块方法的重写\n    if (parts[0] === 'define' || parts[0] === 'module') return;\n\n    // 遍历路由模块并定义每层模块\n    for (len = parts.length; i < len; i++) {\n        // 如果父模块中不存在当前模块\n        // 如果存在的话，则会将此模块重写\n        if (typeof parent[parts[i]] === 'undefined') {\n            // 声明当前模块\n            parent[parts[i]] = {};\n        }\n        // 缓存下一层次的祖父模块\n        old = parent;\n        // 缓存下一层级父模块\n        parent = parent[parts[i]]\n    }\n    // 如果给定模块方法则定义该模块方法\n    if (fn) {\n        // 此时的i=parts.length，故减一\n        old[parts[--i]] = fn();\n    }\n    // 返回模块管理器单体对象\n    return this;\n}\n\nF.module = function (arr, fn) {\n    // modules所依赖的模块\n    // 执行的方法\n    let modules = [];\n    let parent = this;\n    for (let i = 0; i < arr.length; i++) {\n        modules.push(parent[arr[i]])\n    }\n    fn.apply(null, modules)\n}\n\nF.define('ing', function () {\n    return {\n        trim: function (str) {\n            return str.replace(/^\\s+|\\s+$/g, '')\n        }\n    }\n})\n\nF.define('str', function () {\n    return {\n        trim: function (str) {\n            return str.replace(/^\\s+|\\s+$/g, '')\n        }\n    }\n})\n\n\nF.module(['str','ing'], function (str,ing) {\n    console.log(str.trim('  asdasd'));\n    console.log(ing);\n})\n")])])]),t("h3",{attrs:{id:"异步模块模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步模块模式"}},[n._v("#")]),n._v(" 异步模块模式")]),n._v(" "),t("blockquote",[t("p",[n._v("采用单例模式的模块依赖->模块动态加载->模块注册->触发模块依赖回调函数")]),n._v(" "),t("p",[t("code",[n._v("_module.onload")]),n._v("保存着指定模块加载完成的回调函数")]),n._v(" "),t("p",[t("code",[n._v("depsCount")]),n._v("保存着模块依赖的个数")])]),n._v(" "),t("ol",[t("li",[n._v("通过"),t("code",[n._v("F.module")]),n._v("传入依赖模块数组")]),n._v(" "),t("li",[n._v("解析传入的依赖模块数组，通过"),t("code",[n._v("loadModule")]),n._v("方法在"),t("code",[n._v("moduleCache")]),n._v("中注册模块信息")]),n._v(" "),t("li",[n._v("使用"),t("code",[n._v("loadScript")]),n._v("方法动态加载所依赖模块的"),t("em",[n._v("js")]),n._v("文件")]),n._v(" "),t("li",[n._v("被依赖的模块加载完成后，通过"),t("code",[n._v("F.module")]),n._v("执行模块注册方法，传入模块名称字符串")]),n._v(" "),t("li",[n._v("通过"),t("code",[n._v("setModule")]),n._v("方法，去矫正模块")]),n._v(" "),t("li",[t("code",[n._v("setModule")]),n._v("中的"),t("code",[n._v("_module.onload")]),n._v(" 保存着每个依赖模块加载完成的回调")]),n._v(" "),t("li",[n._v("每个被依赖的模块加载完成都会讲模块中的内容保存在"),t("em",[n._v("依赖模块序列")]),t("code",[n._v("params")]),n._v("中")]),n._v(" "),t("li",[n._v("并且每个依赖模块加载完成后都会检查一下依赖序列"),t("code",[n._v("depsCount")]),n._v("的长度是否为0")]),n._v(" "),t("li",[n._v("如果"),t("code",[n._v("depsCount===0")]),n._v("则表示所有依赖已加载完成")]),n._v(" "),t("li",[n._v("则将"),t("code",[n._v("params")]),n._v("中保存的依赖模块的方法传入，被依赖模块的回调函数中")])]),n._v(" "),t("p",[n._v("main.js")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("(function (window) {\n    window.F = {}\n    F.module = function (url, modDeps, modCallback) {\n        var args = Array.from(arguments)\n        var callback = args.pop();\n        // 依赖模块参数传入的不是数组则表示，不依赖模块，进行，模块注册操作\n        var deps = (args.length && args[args.length - 1] instanceof Array) ? args.pop() : []\n        url = args.length ? args.pop() : null;\n        // 依赖模块序列\n        var params = []\n        // 未加载的依赖模块数量统计\n        var depsCount = 0\n        // 依赖模块序列中索引值\n        var i = 0;\n        // 依赖模块序列长度\n        var len;\n        if (len = deps.length) {\n            while (i < len) {\n                (function (i) {\n                    // 增加未加载依赖模块数量统计\n                    depsCount++\n                    // 异步加载模块\n                    loadModule(deps[i], function (mod) {\n                        params[i] = mod;\n                        // 依赖模块加载完成，依赖模块数量统计减一\n                        depsCount--;\n                        // 如果依赖模块全部加载\n                        if (depsCount === 0) {\n                            // 在模块缓存器中矫正该模块，并执行构造函数\n                            setModule(url, params, callback)\n                        }\n                    })\n                })(i)\n                // 遍历下一个依赖模块\n                i++;\n            }\n            // 无依赖模块，直接执行回调函数\n        } else {\n            // 在模块缓存器中矫正该模块，并执行构造函数\n            /**\n             * url:模块注册名称\n             * cb：模块的方法\n             */\n            setModule(url, [], callback)\n        }\n    }\n\n    var moduleCache = {},\n        setModule = function (moduleName, params, callback) {\n            var _module, fn;\n            if (moduleCache[moduleName]) {\n                _module = moduleCache[moduleName];\n                _module.status = 'loaded'\n                _module.exports = callback ? callback.apply(_module, params) : null;\n                // 执行模块文件加载完成回调函数\n                while (fn = _module.onload.shift()) {\n                    fn(_module.exports)\n                }\n            } else {\n                // 模块不存在，则直接执行构造函数\n                callback && callback.apply(null, params)\n            }\n        },\n        loadModule = function (moduleName, callback) {\n            // 依赖模块\n            var _module;\n            if (moduleCache[moduleName]) {\n                _module = moduleCache[moduleName];\n                if (_module.status === 'loaded') {\n                    // 执行模块加载完成回调函数\n                    setTimeout(callback(_module.exports), 0);\n                } else {\n                    // 缓存该模块所处文件加载完成回调函数\n                    _module.onload.push(callback)\n                }\n            } else {\n                // 模块第一次被依赖引用\n                // 缓存该模块初始化信息\n                moduleCache[moduleName] = {\n                    moduleName: moduleName, // 模块Id\n                    status: 'loading',\n                    exports: null,\n                    onload: [callback]\n                }\n                // 加载模块对应文件\n                loadScript(getUrl(moduleName))\n            }\n        },\n        getUrl = function (moduleName) {\n            return String(moduleName).replace(/\\.js$/g, '') + '.js';\n        },\n        loadScript = function (src) {\n            var _script = document.createElement('script')\n            _script.type = 'text/JavaScript'\n            _script.async = true //异步加载\n            _script.src = src\n            document.querySelector('head').appendChild(_script)\n        }\n})(window)\n\n\n\nF.module(['36/lib/dom'], function (dom) {\n    console.log(dom);\n})\n\n")])])]),t("p",[n._v("dom.js， 注册依赖模块")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("F.module('36/lib/dom', function () {\n    return {\n        g: function (id) {\n            return document.getElementById(id)\n        }\n    }\n})\n")])])]),t("h3",{attrs:{id:"widget模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#widget模式"}},[n._v("#")]),n._v(" Widget模式")]),n._v(" "),t("h3",{attrs:{id:"mvc模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvc模式"}},[n._v("#")]),n._v(" MVC模式")]),n._v(" "),t("blockquote",[t("p",[n._v("model---view---control")]),n._v(" "),t("p",[n._v("用一种将业务逻辑、数据、视图分离的方式组织架构代码")]),n._v(" "),t("p",[n._v("MVC架构模式很好的解决了页面中数据层、视图层、业务逻辑层之间的耦合")])]),n._v(" "),t("ul",[t("li",[n._v("数据层：专注于获取保存数据")]),n._v(" "),t("li",[n._v("视图层：专注于将数据渲染成html")]),n._v(" "),t("li",[n._v("控制器层：专注于页面的交互逻辑")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("window.addEventListener('load', function () {\n    var MVC = MVC || {}\n    // 数据模型层\n    MVC.model = function () {\n        // 内部数据对象\n        var M = {}\n        M.data = {\n            slideBar: [{\n                    text: '1111',\n                    icon: '22222',\n                    content: '333333',\n                    img: '444444',\n                    href: '5555555'\n                },\n                {\n                    text: '1111',\n                    icon: '22222',\n                    content: '333333',\n                    img: '444444',\n                    href: '5555555'\n                },\n                {\n                    text: '1111',\n                    icon: '22222',\n                    content: '333333',\n                    img: '444444',\n                    href: '5555555'\n                }\n            ]\n        }\n        // 配置数据，页面加载时即提供\n        M.conf = {\n            slideBarCloseAnimate: false\n        }\n        return {\n            // 获取服务端数据的方法\n            getData: function (key) {\n                return M.data[key]\n            },\n            // 获取配置数据方法\n            getConf: function (key) {\n                return M.conf[key]\n            },\n            // 设置数据\n            setData: function (key, value) {\n                M.data[key] = value;\n                return this;\n            },\n            setConf: function (key, value) {\n                M.conf[key] = value;\n                return this;\n            }\n\n        }\n    }();\n    // 视图层\n    // 为了让控制器可操作视图层内的视图，我们需要返回一些操作接口方法\n    MVC.view = function () {\n        // 模型数据层对象操作方法引用\n        var M = MVC.model\n        // 内部视图创建方法对象\n        var V = {\n            createSlideBar:function () {\n                /**\n                 * 视图层与数据层绑定\n                 * 并最终渲染出html的操作逻辑\n                 */\n                var html = '',\n                // 获取数据模型层的数据\n                data = M.getData('slideBar');\n                console.log($);\n                if(!data || !data.length)return;\n                var dom = $.create('div',{\n                    'class': 'slideBar',\n                    'id': 'slideBar'\n                })\n                \n            }\n        }\n        // 获取视图接口方法\n        return function (v) {\n            // 根据视图名称返回视图\n            V[v]();\n        }\n    }()\n    // 控制器层\n    MVC.ctrl = function () {\n        var M = MVC.model;\n        var V = MVC.view\n        // 控制器创建方法对象\n        var C = {\n            // 侧边导航栏模块\n            initSlideBar:function () {\n                V('createSlideBar');\n                /**\n                 * 这里写一系列交互逻辑\n                 */\n                \n            }\n        }\n\n        // 为侧边导航模块添加交互与动画特效\n        C.initSlideBar();\n    }()\n\n})\n")])])]),t("h3",{attrs:{id:"mvp模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvp模式"}},[n._v("#")]),n._v(" MVP模式")]),n._v(" "),t("blockquote",[t("p",[n._v("model---view---presenter")]),n._v(" "),t("p",[n._v("view层不直接引用model层内的数据，而是通过presenter层实现对model层内的数据访问。")]),n._v(" "),t("p",[n._v("即所有层次的交互都发生在presenter层中")]),n._v(" "),t("p",[n._v("与mvc模式略有不同")]),n._v(" "),t("p",[n._v("mvc模式中v层和c层都对数据进行了操作，有可能会造成冲突")]),n._v(" "),t("p",[n._v("mvp模式中将v层对数据的操作交给了c层，形成了管理器层，达到了数据统一操作的目的")]),n._v(" "),t("p",[n._v("后期维护也只需要维护p层")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('/* eslint-disable */\nwindow.addEventListener("load", function() {\n  (function(window) {\n    var MVP = function() {};\n    // 数据模型层\n    MVP.model = function() {\n      // 内部数据对象\n      var M = {};\n      M.data = {};\n      // 配置数据，页面加载时即提供\n      M.conf = {\n        slideBarCloseAnimate: false\n      };\n      return {\n        // 获取服务端数据的方法\n        getData: function(key) {\n          return M.data[key];\n        },\n        // 获取配置数据方法\n        getConf: function(key) {\n          return M.conf[key];\n        },\n        // 设置数据\n        setData: function(key, value) {\n          M.data[key] = value;\n          return this;\n        },\n        setConf: function(key, value) {\n          M.conf[key] = value;\n          return this;\n        }\n      };\n    };\n    /**\n     * 视图层\n     * 将非HTML语言以及数据编译成html语言\n     * @returns\n     */\n    MVP.view = function() {\n      var REPLACEKEY = "__REPLACEKEY__";\n      /**\n       * 获取完整元素模板\n       * @param {*} str   元素字符串\n       * @param {*} replacePos    元素类型\n       */\n      function getHTML(str, replacePos) {}\n\n      /**\n       * 数组迭代器\n       * 将数组中的每个值依次传入fn中执行\n       * @param arr 数组\n       * @param fn 回调函数\n       */\n      function eachArray(arr, fn) {}\n      /**\n       * 替换兄弟元素模板或子元素模板\n       * @param str 原始字符串\n       * @param rep 兄弟元素模板或者子元素模板\n       */\n      function formateItem(str, rep) {\n        return str.replace(new RegExp(REPLACEKEY, "g"), rep);\n      }\n      /**\n       * 将传入的字符串解析成html模板\n       */\n      return function(str) {\n        var part = str;\n      };\n    };\n    /**\n     * 控制器层\n     * 使用视图层提供的方法， 模板编写， 数据绑定\n     * 以及交互逻辑\n     */\n    MVP.presenter = (function() {\n      var V = MVP.view;\n      var M = MVP.model;\n      var C = {\n        /**\n         * 导航管理器\n         * @param {*} M     数据层对象\n         * @param {*} V     视图层对象\n         */\n        nav: function(M, V) {\n          // 获取导航渲染数据\n          var data = M.getData("nav");\n          // 获取导航渲染模板\n          var tpl = V("li.@mode @choose");\n          //  生成html的业务逻辑\n          $.create("ul", {\n            class: "navigation",\n            id: "nav"\n          })\n            //   插入导航视图\n            .html(\n              //   渲染导航视图\n              V.formateItem(tpl, data)\n            )\n            .appendTo();\n\n          //   剩下的页面交互逻辑、\n          // 。。。。。\n        }\n      };\n      return {\n        init: function() {\n          // 遍历内部管理器\n          for (var i in C) {\n            // 执行所有管理器内部逻辑\n            C[i] && C[i](M, V, i);\n          }\n        }\n      };\n    })();\n\n    // mvp入口\n    MVP.init = function() {\n      this.presenter.init();\n    };\n    window.MVP = MVP;\n  })(window);\n});\n\n')])])]),t("h3",{attrs:{id:"mvvm模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvvm模式"}},[n._v("#")]),n._v(" MVVM模式")]),n._v(" "),t("blockquote",[t("p",[n._v("model---view---viewModel")])])])}),[],!1,null,null,null);e.default=r.exports}}]);