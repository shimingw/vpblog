(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{256:function(t,e,r){"use strict";r.r(e);var o=r(2),n=Object(o.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"redux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[t._v("#")]),t._v(" redux")]),t._v(" "),r("p",[t._v("日期：2018-8-11")]),t._v(" "),r("h2",{attrs:{id:"provider"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#provider"}},[t._v("#")]),t._v(" Provider")]),t._v(" "),r("ul",[r("li",[t._v("在原应用组件上包裹一层，使原来整个应用成为Provider的子组件")]),t._v(" "),r("li",[t._v("接收Redux的store作为props，通过context对象传递给子孙组件上的connect")]),t._v(" "),r("li",[t._v("使子孙组件上的connect可以直接访问到context对象中的store")])]),t._v(" "),r("blockquote",[r("p",[t._v("context可以使子孙组件直接获取父级组件中的数据或方法，而无需一层一层通过props向下传递。")]),t._v(" "),r("p",[t._v("context对象相当于一个独立的空间，父组件通过getChildContext()向该空间内写值")]),t._v(" "),r("p",[t._v("定义了contextTypes验证的子孙组件可以通过this.context.xxx，从context对象中读取xxx字段的值。")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("export default class Provider extends Component {\n  getChildContext() {\n    return { store: this.store }\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    this.store = props.store\n  }\n\n  render() {\n    return Children.only(this.props.children)\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  Provider.prototype.componentWillReceiveProps = function (nextProps) {\n    const { store } = this\n    const { store: nextStore } = nextProps\n\n    if (store !== nextStore) {\n      warnAboutReceivingStore()\n    }\n  }\n}\n\nProvider.propTypes = {\n  store: storeShape.isRequired,\n  children: PropTypes.element.isRequired\n}\nProvider.childContextTypes = {\n  store: storeShape.isRequired\n}\n")])])]),r("p",[t._v("["),r("code",[t._v("mapStateToProps(state, [ownProps]): stateProps")]),t._v("] ("),r("em",[t._v("Function")]),t._v("): 如果定义该参数，组件将会监听 Redux store 的变化。")]),t._v(" "),r("p",[t._v("任何时候，只要 Redux store 发生改变，"),r("code",[t._v("mapStateToProps")]),t._v(" 函数就会被调用。该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。如果你省略了这个参数，你的组件将不会监听 Redux store。")]),t._v(" "),r("p",[t._v("如果指定了该回调函数中的第二个参数 "),r("code",[t._v("ownProps")]),t._v("，则该参数的值为传递到组件的 props，而且只要组件接收到新的 props，"),r("code",[t._v("mapStateToProps")]),t._v(" 也会被调用（例如，当 props 接收到来自父组件一个小小的改动，那么你所使用的 ownProps 参数，mapStateToProps 都会被重新计算）。")]),t._v(" "),r("h2",{attrs:{id:"action"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#action"}},[t._v("#")]),t._v(" Action")]),t._v(" "),r("blockquote",[r("p",[r("a",{attrs:{href:"http://www.redux.org.cn/docs/basics/Actions.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("action"),r("OutboundLink")],1),t._v(" 来描述“发生了什么”")]),t._v(" "),r("p",[r("strong",[t._v("Action")]),t._v(" 是把数据从应用传到 store 的有效载荷。它是 store 数据的"),r("strong",[t._v("唯一")]),t._v("来源。")]),t._v(" "),r("p",[t._v("一般来说你会通过 "),r("a",{attrs:{href:"http://www.redux.org.cn/docs/api/Store.html#dispatch",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("store.dispatch()")]),r("OutboundLink")],1),t._v(" 将 action 传到 store。")]),t._v(" "),r("p",[t._v("vuex中省去了action这层，将action和reducer合并成了mutation")])]),t._v(" "),r("p",[t._v("例子：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("action 内必须使用一个字符串类型的 type 字段来表示将要执行的动作。\n\nconst ADD_TODO = 'ADD_TODO'\n\nlet action = {\n  type: ADD_TODO,\n  text: 'Build my first Redux app'\n}\n\ndispatch(action)\n")])])]),r("h2",{attrs:{id:"reducer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reducer"}},[t._v("#")]),t._v(" Reducer")]),t._v(" "),r("blockquote",[r("p",[r("a",{attrs:{href:"http://www.redux.org.cn/docs/basics/Reducers.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("reducers"),r("OutboundLink")],1),t._v(" 来根据 action 更新 state 的用法。")]),t._v(" "),r("p",[t._v("根据传入的action，执行预设好reducer，修改store值，类似vuex的mutation")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("定义了一个todoApp的reducer\n\nfunction todoApp(state = initialState, action) {\n  return {\n    visibilityFilter: visibilityFilter(state.visibilityFilter, action),\n    todos: todos(state.todos, action)\n  };\n}\n\ncombineReducers利用柯里化函数的方法，预设了一些参数\n/**\n * combineReducers 工具类来做上面 todoApp 做的事情\n * 这样就能消灭一些样板代码了。有了它，可以这样重构 todoApp\n * combineReducers 函数的作用可以参照下面两个方法\n * const reducer = combineReducers({\n    a: doSomethingWithA,\n    b: processB,\n    c: c\n  })\n  function reducer(state = {}, action) {\n  return {\n    a: doSomethingWithA(state.a, action),\n    b: processB(state.b, action),\n    c: c(state.c, action)\n  }\n}\n*/\n \nconst todoApp = combineReducers({\n  visibilityFilter,\n  todos\n});\n")])])]),r("h2",{attrs:{id:"store"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#store"}},[t._v("#")]),t._v(" Store")]),t._v(" "),r("blockquote",[r("p",[r("strong",[t._v("Store")]),t._v(" 就是把action和reducer联系到一起的对象")]),t._v(" "),r("p",[r("strong",[t._v("Redux 应用只有一个单一的 store")]),t._v("，当需要拆分数据处理逻辑时，你应该使用 "),r("a",{attrs:{href:"http://www.redux.org.cn/docs/basics/Reducers.html#splitting-reducers",target:"_blank",rel:"noopener noreferrer"}},[t._v("reducer 组合"),r("OutboundLink")],1),t._v("而不是创建多个 store。")])]),t._v(" "),r("ul",[r("li",[t._v("维持应用的 state；")]),t._v(" "),r("li",[t._v("提供 "),r("a",{attrs:{href:"http://www.redux.org.cn/docs/api/Store.html#getState",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("getState()")]),r("OutboundLink")],1),t._v(" 方法获取 state；")]),t._v(" "),r("li",[t._v("提供 "),r("a",{attrs:{href:"http://www.redux.org.cn/docs/api/Store.html#dispatch",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("dispatch(action)")]),r("OutboundLink")],1),t._v(" 方法更新 state；")]),t._v(" "),r("li",[t._v("通过 "),r("a",{attrs:{href:"http://www.redux.org.cn/docs/api/Store.html#subscribe",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("subscribe(listener)")]),r("OutboundLink")],1),t._v(" 注册监听器;")]),t._v(" "),r("li",[t._v("通过 "),r("a",{attrs:{href:"http://www.redux.org.cn/docs/api/Store.html#subscribe",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("subscribe(listener)")]),r("OutboundLink")],1),t._v(" 返回的函数注销监听器。")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("action和reducer创建好后\n使用createStore方法生成store通过provider组件传给整个应用\n\nimport { createStore } from 'redux'\nimport todoApp from './reducers'\nlet store = createStore(todoApp)\n")])])]),r("h2",{attrs:{id:"mapstatetoprops"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mapstatetoprops"}},[t._v("#")]),t._v(" mapStateToProps")]),t._v(" "),r("blockquote",[r("p",[t._v("在组件中注册获取store中的值得方法")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("const mapStateToProps = store => {\n  return {\n    articleList: store.articleList\n  };\n};\n")])])]),r("h2",{attrs:{id:"mapdispatchtoprops"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mapdispatchtoprops"}},[t._v("#")]),t._v(" mapDispatchToProps")]),t._v(" "),r("blockquote",[r("p",[t._v("在组件中注册触发reducer的方法")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("const mapDispatchToProps = dispatch => {\n  return {\n    addArticleList: list => {\n      dispatch(addArticleList(list));\n    }\n  };\n};\n")])])]),r("h2",{attrs:{id:"connect"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#connect"}},[t._v("#")]),t._v(" connect")]),t._v(" "),r("blockquote",[r("p",[t._v("将组件与redux结合的方法")]),t._v(" "),r("p",[t._v("使组件可以访问和修改store中的值")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("export default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ArticleList);\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);