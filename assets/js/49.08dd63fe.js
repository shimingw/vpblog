(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{299:function(e,t,a){"use strict";a.r(t);var s=a(2),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"lint-staged"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lint-staged"}},[e._v("#")]),e._v(" lint-staged")]),e._v(" "),a("p",[e._v("根据"),a("code",[e._v("package.json")]),e._v("中配置的"),a("code",[e._v("husky")]),e._v("工具（例如 "),a("a",{attrs:{href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Prettier"),a("OutboundLink")],1),e._v(", "),a("a",{attrs:{href:"https://eslint.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ESlint"),a("OutboundLink")],1),e._v("） 对暂存区的代码进行检查")]),e._v(" "),a("h3",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install --save-dev lint-staged@next\n")])])]),a("h3",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[e._v("#")]),e._v(" 配置")]),e._v(" "),a("h4",{attrs:{id:"lint-staged-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lint-staged-配置"}},[e._v("#")]),e._v(" lint-staged 配置")]),e._v(" "),a("ul",[a("li",[e._v("可以直接在"),a("code",[e._v("package.json")]),e._v("中配置")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('  "lint-staged": {\n    "**/src/**/*.{js,vue}": [\t//配置过滤规则\n      "prettier --write --single-quote --no-semi",\t//配置检查规则\n      "eslint --fix",\n      "git add"\n    ]\n  }\n')])])]),a("ul",[a("li",[e._v("还可以通过"),a("code",[e._v(".lintstagedrc")]),e._v("、"),a("code",[e._v(".lintstagedrc.js")]),e._v("、"),a("code",[e._v("lint-staged.config.js")]),e._v("默认配置文件进行配置")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("//通过配置文件可以编写更个性的过滤规则\nmodule.exports = {\n  '**/*.js?(x)': filenames => filenames.map(filename => `prettier --write '${filename}'`)\n}\n")])])]),a("h4",{attrs:{id:"husky-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#husky-配置"}},[e._v("#")]),e._v(" husky 配置")]),e._v(" "),a("p",[e._v("最后需要在恰当的时候调用"),a("code",[e._v("lint-staged")]),e._v("，一般是在"),a("code",[e._v("commit")]),e._v("之前")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"husky": {\n    "hooks": {\n      "pre-commit": "lint-staged"\n    }\n }\n')])])]),a("h3",{attrs:{id:"内部流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部流程"}},[e._v("#")]),e._v(" 内部流程")]),e._v(" "),a("ol",[a("li",[e._v("git commit 时，触发 husky 钩子，用过钩子去执行 lint-staged 插件")]),e._v(" "),a("li",[e._v("lint-staged 根据 eslint、prettier 配置规则对文件进行修复和检查")]),e._v(" "),a("li",[e._v("如果文件通过检查则成功 commit")]),e._v(" "),a("li",[e._v("如果检查未通过会在控制台提示错误")])]),e._v(" "),a("h2",{attrs:{id:"prettier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prettier"}},[e._v("#")]),e._v(" prettier")]),e._v(" "),a("p",[e._v("一个代码格式化程序"),a("a",{attrs:{href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"安装-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-2"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install --save-dev --save-exact prettier\n")])])]),a("h3",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[e._v("#")]),e._v(" 使用")]),e._v(" "),a("p",[a("code",[e._v("prettier")]),e._v("可以将文件以你定义的规则去格式化文件，如果你没有配置任何规则，则以"),a("code",[e._v("prettier")]),e._v("的默认规则进行文件格式化")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npx prettier --write xx.js\n")])])]),a("h3",{attrs:{id:"参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[e._v("#")]),e._v(" 参数")]),e._v(" "),a("ul",[a("li",[e._v("--wirte：就地格式化文件")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://prettier.io/docs/en/options.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("more"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"eslint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eslint"}},[e._v("#")]),e._v(" ESLint")]),e._v(" "),a("h3",{attrs:{id:"安装-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-3"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("p",[e._v("一个代码检查工具，它使用"),a("code",[e._v("AST")]),e._v("去分析代码中的模式")]),e._v(" "),a("p",[e._v("如果你的代码有不符合规则的地方，他都会提示出来")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install --save-dev eslint\n")])])]),a("h3",{attrs:{id:"初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[e._v("#")]),e._v(" 初始化")]),e._v(" "),a("p",[e._v("可以帮助开发者快速生成一个"),a("code",[e._v("eslint")]),e._v("的配置文件，并且自动安装相关依赖")]),e._v(" "),a("p",[e._v("开发者可以根据个人项目的特点，去生"),a("code",[e._v("eslint")]),e._v("规则")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("node_modules/.bin/eslint --init\n// 如果全局安装了 可以直接 eslint --init\n")])])]),a("h3",{attrs:{id:"配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[e._v("#")]),e._v(" 配置文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("module.exports = {\n  env: {\n    browser: true,\n    es6: true\n  },\n  extends: [\n    'plugin:vue/essential',\n    'standard'\n  ],\n  globals: {\n    Atomics: 'readonly',\n    SharedArrayBuffer: 'readonly'\n  },\n  parserOptions: {\n    ecmaVersion: 2018,\n    sourceType: 'module'\n  },\n  plugins: [\n    'vue'\n  ],\n  rules: {\n  }\n}\n")])])]),a("ul",[a("li",[a("p",[a("code",[e._v("env")]),e._v(": Environments，指定代码的运行环境。不同的运行环境，全局变量不一样，指明运行环境这样 ESLint 就能识别特定的全局变量。同时也会开启对应环境的语法支持，例如：es6。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("parser")]),e._v("：ESLint 默认使用 Espree 作为其解析器，但它并不能很好的适应 React 环境，所以刚才安装了 babel-eslint 用来代替默认的解析器，在配置里这么写"),a("code",[e._v('"parser": "babel-eslint"')]),e._v("。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("plugins")]),e._v("：顾名思义就是插件，插件是单独的 npm 包，命名一般以"),a("code",[e._v("eslint-plugin")]),e._v("开头，写的时候用字符串数组的形式，可以省略"),a("code",[e._v("eslint-plugin")]),e._v("开头。plugins 一般包含一个或多个规则配置，可以在 extends 中引入。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("extends")]),e._v("：ESLint 不需要自行定义大量的规则，因为很多规则已被分组作为一个规则配置。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("rules")]),e._v("：这里可以对规则进行细致的定义了，覆盖之前前面说的 extends 中定义的规则。例如 - "),a("code",[e._v("indent")]),e._v("就是对缩进的修改。"),a("code",[e._v('"indent": ["error",4]')]),e._v(" 前面一项代表错误等级，第二项是具体配置，有些规则有第三项选项，例如 indent 就有 "),a("code",[e._v('{ "SwitchCase": 1 }')]),e._v("，代表对 switch 语句采取什么样的缩进策略，如果不设默认是 0。具体可以定义什么 rules，可以"),a("a",{attrs:{href:"https://link.jianshu.com/?t=https://eslint.org/docs/rules/",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考这里"),a("OutboundLink")],1)])])]),e._v(" "),a("p",[e._v("错误等级有三级 "),a("code",[e._v("0")]),e._v("，"),a("code",[e._v("1")]),e._v("，"),a("code",[e._v("2")]),e._v("，分别代表"),a("code",[e._v("off")]),e._v("，"),a("code",[e._v("warning")]),e._v("，"),a("code",[e._v("error")]),e._v("。error 错误会终止 lint-staged 执行。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("globals")]),e._v("：全局变量，当访问未定义的变量时，no-undef 规则将发出警告。如果你想在一个文件里使用全局变量，推荐你定义这些全局变量，这样 ESLint 就不会发出警告了。你可以使用注释或在配置文件中定义全局变量。")]),e._v(" "),a("li",[a("code",[e._v("parserOptions")]),e._v("：EsLint 通过 parserOptions，允许指定校验的 ecma 的版本，及 ecma 的一些特性")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "parserOptions": {\n        "ecmaVersion": 6, //指定ECMAScript支持的版本，6为ES6\n        "sourceType": "module", //指定来源的类型，有两种”script”或”module”\n        "ecmaFeatures": {\n            "jsx": true//启动JSX\n        },\n    }\n}\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);