(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{309:function(a,e,t){"use strict";t.r(e);var s=t(10),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"babel-的包构成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-的包构成"}},[a._v("#")]),a._v(" babel 的包构成")]),a._v(" "),t("h3",{attrs:{id:"核心包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心包"}},[a._v("#")]),a._v(" 核心包")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("@babel/core")]),a._v(" babel 的核心模块，将代码转换成 AST（依赖"),t("code",[a._v("@babel/parser")]),a._v("），再将 AST 转成代码（依赖"),t("code",[a._v("@babel/generator")]),a._v("）都靠它")]),a._v(" "),t("li",[t("code",[a._v("babylon")]),a._v(" Babel 的解析器。最初是 从 Acorn 项目 fork 出来的。使用了基于插件的架构，有一个 plugins 选项可以开关内置的插件，现已被"),t("code",[a._v("@babel/parser")]),a._v("代替")]),a._v(" "),t("li",[t("code",[a._v("@babel/parser")]),a._v(" 取代"),t("code",[a._v("babylon")]),a._v("，成为 Babel 新的解析器")]),a._v(" "),t("li",[t("code",[a._v("@babel/traverse")]),a._v(" Babel Traverse（遍历）模块维护了整棵树的状态，并且负责替换、移除和添加节点。")]),a._v(" "),t("li",[t("code",[a._v("@babel/generator")]),a._v(" 读取 AST 并将其转换为代码和源码映射")])]),a._v(" "),t("h3",{attrs:{id:"功能包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#功能包"}},[a._v("#")]),a._v(" 功能包")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("@babel/types")]),a._v(" 一个用于 AST 节点的 "),t("code",[a._v("Lodash")]),a._v(" 式工具库")]),a._v(" "),t("li",[t("code",[a._v("babel-template")]),a._v("：辅助函数，用于从字符串形式的代码来构建 AST 树节点")]),a._v(" "),t("li",[t("code",[a._v("babel-helpers")]),a._v("：一系列预制的 babel-template 函数，用于提供给一些 plugins 使用")]),a._v(" "),t("li",[t("code",[a._v("babel-code-frames")]),a._v("：用于生成错误信息，打印出错误点源代码帧以及指出出错位置")]),a._v(" "),t("li",[t("code",[a._v("babel-plugin-xxx")]),a._v("：babel 转译过程中使用到的插件，其中 babel-plugin-transform-xxx 是 transform 步骤使用的")]),a._v(" "),t("li",[t("code",[a._v("babel-preset-xxx")]),a._v("：transform 阶段使用到的一系列的 plugin")]),a._v(" "),t("li",[t("code",[a._v("babel-polyfill")]),a._v("：JS 标准新增的原生对象和 API 的 shim，实现上仅仅是 core-js 和 regenerator-runtime 两个包的封装")]),a._v(" "),t("li",[t("code",[a._v("babel-runtime")]),a._v("：功能类似 babel-polyfill，一般用于 library 或 plugin 中，因为它不会污染全局作用域")])]),a._v(" "),t("h3",{attrs:{id:"工具包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工具包"}},[a._v("#")]),a._v(" 工具包")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("babel-cli")]),a._v("：babel 的命令行工具，通过命令行对 js 代码进行转译")]),a._v(" "),t("li",[t("code",[a._v("babel-register")]),a._v("：通过绑定 node.js 的 require 来自动转译 require 引用的 js 代码文件")])]),a._v(" "),t("h2",{attrs:{id:"babel-的处理步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-的处理步骤"}},[a._v("#")]),a._v(" Babel 的处理步骤")]),a._v(" "),t("p",[a._v("Babel 的三个主要处理步骤分别是： 解析（parse），转换（transform），生成（generate）。")]),a._v(" "),t("h3",{attrs:{id:"解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析"}},[a._v("#")]),a._v(" 解析")]),a._v(" "),t("p",[a._v("解析步骤接收代码并输出 AST。 这个步骤分为两个阶段：词法分析（Lexical Analysis） 和 语法分析（Syntactic Analysis）。")]),a._v(" "),t("p",[t("strong",[a._v("词法分析")])]),a._v(" "),t("p",[a._v("词法分析阶段把字符串形式的代码转换为 令牌（tokens） 流。")]),a._v(" "),t("p",[a._v("会把每一块代码转换成单独的一个类型对象，比如")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('n * n;\n[\n  { type: { ... }, value: "n", start: 0, end: 1, loc: { ... } },\n  { type: { ... }, value: "*", start: 2, end: 3, loc: { ... } },\n  { type: { ... }, value: "n", start: 4, end: 5, loc: { ... } },\n  ...\n]\n')])])]),t("p",[t("strong",[a._v("语法分析")])]),a._v(" "),t("p",[a._v("语法分析阶段会把一个令牌流转换成 AST 的形式。这个阶段会使用令牌中的信息把它们转换成一个 AST 的表述结构，这样更易于后续的操作。")]),a._v(" "),t("p",[a._v("会把词法分析的类型对象转换成一个树形结构（AST 语法树）")]),a._v(" "),t("h3",{attrs:{id:"转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转换"}},[a._v("#")]),a._v(" 转换")]),a._v(" "),t("p",[a._v("转换步骤接收 AST 并对其进行"),t("strong",[a._v("遍历")]),a._v("，在此过程中对节点进行"),t("strong",[a._v("添加、更新及移除等操作")]),a._v("。 这是 Babel 或是其他编译器中最复杂的过程同时也"),t("strong",[a._v("是插件将要介入工作的部分")])]),a._v(" "),t("h3",{attrs:{id:"生成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成"}},[a._v("#")]),a._v(" 生成")]),a._v(" "),t("p",[a._v("将 AST 语法树转换成，字符串形式的代码")]),a._v(" "),t("h2",{attrs:{id:"遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#遍历"}},[a._v("#")]),a._v(" 遍历")]),a._v(" "),t("p",[a._v("想要转换 AST 你需要进行递归的树形遍历。")]),a._v(" "),t("h3",{attrs:{id:"visitors（访问者）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#visitors（访问者）"}},[a._v("#")]),a._v(" Visitors（访问者）")]),a._v(" "),t("p",[a._v("访问者是一个用于 AST 遍历的跨语言的模式。 简单的说它们就是一个对象，定义了用于在一个树状结构中"),t("strong",[a._v("获取具体节点")]),a._v("的方法。")]),a._v(" "),t("h2",{attrs:{id:"一些包的详细介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一些包的详细介绍"}},[a._v("#")]),a._v(" 一些包的详细介绍")]),a._v(" "),t("h3",{attrs:{id:"babel-core"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-core"}},[a._v("#")]),a._v(" babel-core")]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("Babel")]),a._v("的核心模块，调用，"),t("strong",[a._v("babel-core")]),a._v("的 API 可以进行转码")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var babel = require('babel-core');\n\n// 字符串转码\nbabel.transform('code();', options);\n")])])]),t("h3",{attrs:{id:"babel-preset-env"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-preset-env"}},[a._v("#")]),a._v(" babel-preset-env")]),a._v(" "),t("blockquote",[t("p",[a._v("转码规则，配合"),t("strong",[a._v("babel-core")]),a._v("和"),t("strong",[a._v("babel-loader")]),a._v(" 使用，可以根据你定义的规则进行转码。")]),a._v(" "),t("p",[a._v("例如"),t("strong",[a._v("babel-preset-env")]),a._v("预设了很多可供选择环境，浏览器的版本等等")])]),a._v(" "),t("h3",{attrs:{id:"babel-plugin-transform-runtime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-plugin-transform-runtime"}},[a._v("#")]),a._v(" babel-plugin-transform-runtime")]),a._v(" "),t("blockquote",[t("p",[a._v("该插件是在运行时，起作用，为环境填充不具备的 API")]),a._v(" "),t("p",[a._v("外部引用辅助函数和内置函数，自动填充代码而不会污染全局变量")])]),a._v(" "),t("p",[a._v("例如：")]),a._v(" "),t("p",[a._v("实例方法如"),t("code",[a._v('"foobar".includes("foo")')]),a._v("无法工作，因为这需要修改现有的内置插件（"),t("a",{attrs:{href:"http://babeljs.io/docs/usage/polyfill",target:"_blank",rel:"noopener noreferrer"}},[t("code",[a._v("@babel/polyfill")]),t("OutboundLink")],1),a._v("用于此）。")]),a._v(" "),t("h3",{attrs:{id:"babel-runtime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-runtime"}},[a._v("#")]),a._v(" babel-runtime")]),a._v(" "),t("blockquote",[t("p",[a._v("与"),t("strong",[a._v("transform-runtime")]),a._v(" 结合使用")]),a._v(" "),t("p",[t("strong",[a._v("transform-runtime")]),a._v("转码时会使用到一些工具函数。将这些工作函数单独抽离到了"),t("strong",[a._v("babel-runtime")]),a._v("中，减少多")])]),a._v(" "),t("h2",{attrs:{id:"plugins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugins"}},[a._v("#")]),a._v(" plugins")]),a._v(" "),t("p",[a._v("插件应用于"),t("code",[a._v("babel")]),a._v("的转译过程，尤其是第二个阶段"),t("strong",[a._v("transforming")]),a._v("，如果这个阶段不使用任何插件，那么"),t("code",[a._v("babel")]),a._v("会原样输出代码。\n我们主要关注"),t("strong",[a._v("transforming")]),a._v("阶段使用的插件，因为"),t("strong",[a._v("transform")]),a._v("插件会自动使用对应的词法插件，所以"),t("strong",[a._v("parsing")]),a._v("阶段的插件不需要配置。")]),a._v(" "),t("p",[a._v("例如你需要编译"),t("code",[a._v("es6")]),a._v("的"),t("code",[a._v("Module")]),a._v("语法，就需要使用"),t("code",[a._v("babel-plugin-import")]),a._v("插件")]),a._v(" "),t("h2",{attrs:{id:"presets"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#presets"}},[a._v("#")]),a._v(" presets")]),a._v(" "),t("p",[a._v("如果要自行配置转译过程中使用的各类插件，那太痛苦了，所以"),t("code",[a._v("babel")]),a._v("官方帮我们做了一些预设的插件集，称之为"),t("code",[a._v("preset")]),a._v("，这样我们只需要使用对应的"),t("code",[a._v("preset")]),a._v("就可以了。")]),a._v(" "),t("p",[a._v("例如"),t("code",[a._v("vue-cli3")]),a._v("搭建的项目中，就使用了预设")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("module"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("exports "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  presets"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"@vue/app"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("h2",{attrs:{id:"polyfill"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#polyfill"}},[a._v("#")]),a._v(" polyfill")]),a._v(" "),t("p",[a._v("一个新"),t("code",[a._v("api")]),a._v("填充工具")]),a._v(" "),t("p",[a._v("例如你需要运行的浏览器环境不存在"),t("code",[a._v("promise")]),a._v("对象，但是你代码中，又需要用到"),t("code",[a._v("promise")]),a._v("对象，那"),t("code",[a._v("polyfill")]),a._v("，就会在入口文件中执行，为你的"),t("code",[a._v("window")]),a._v("下挂载"),t("code",[a._v("promise")]),a._v("对象")]),a._v(" "),t("p",[a._v("有两种配置方式")]),a._v(" "),t("ul",[t("li",[a._v("代码方式： "),t("code",[a._v('import "babel-polyfill')])]),a._v(" "),t("li",[a._v("webpack 配置： "),t("code",[a._v('module.exports = { entry: ["babel-polyfill", "./app/js"] };')])])]),a._v(" "),t("p",[a._v("但是这有点不好的是，引入"),t("code",[a._v("babel-polyfill")]),a._v("，会增加代码体积，可能有些"),t("code",[a._v("api")]),a._v("，你根本没有用到")]),a._v(" "),t("p",[a._v("所以"),t("code",[a._v("babel7")]),a._v("出了一个新特性，可以在编译时，根据项目使用到了哪些"),t("code",[a._v("api")]),a._v("，再进行按需加载")]),a._v(" "),t("h2",{attrs:{id:"runtime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#runtime"}},[a._v("#")]),a._v(" runtime")]),a._v(" "),t("p",[a._v("https://www.cnblogs.com/75115926/p/12627009.html")]),a._v(" "),t("p",[a._v("直接使用 babel-polyfill 对于应用或页面等环境在你控制之中的情况来说，并没有什么问题。但是对于在 library 中使用 polyfill，就变得不可行了。因为 library 是供外部使用的，但外部的环境并不在 library 的可控范围，而 polyfill 是会污染原来的全局环境的（因为新的原生对象、API 这些都直接由 polyfill 引入到全局环境）。这样就很容易会发生冲突，所以这个时候，babel-runtime 就可以派上用场了。")]),a._v(" "),t("p",[t("code",[a._v("babel-runtime")]),a._v("会在编译查看该文件是否用到了新"),t("code",[a._v("api")]),a._v("，如果用到了则在该文件引入，新"),t("code",[a._v("api")]),a._v("，防止污染全局作用域")]),a._v(" "),t("p",[a._v("例如：")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 输入的ES6代码")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" sym "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Symbol")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 通过transform-runtime转换后的ES5+runtime代码")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 既可以使用Symbol对象，又可以避免污染全局作用域")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" _symbol "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"babel-runtime/core-js/symbol"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" sym "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" _symbol"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("default"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);