(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{283:function(r,n,t){"use strict";t.r(n);var a=t(2),e=Object(a.a)({},(function(){var r=this,n=r.$createElement,t=r._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h2",{attrs:{id:"时间复杂度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[r._v("#")]),r._v(" 时间复杂度")]),r._v(" "),t("p",[r._v("https://blog.csdn.net/qq_41523096/article/details/82142747")]),r._v(" "),t("blockquote",[t("p",[r._v("用来描述一个函数执行所需要的时长")]),r._v(" "),t("p",[r._v("取一个函数运行时长的最高阶项")]),r._v(" "),t("p",[r._v("根据处理数据的大小，是一个线性的值，用"),t("strong",[r._v("O")]),r._v("来标识")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("比如\nT（n） = 3n \n最高阶项为3n，省去系数3，转化的时间复杂度为：\nT（n） =  O（n）\n\nO（1）,O（nlogn）, O（n^3）, O（m*n），O（2^n），O（n！）\n")])])]),t("h3",{attrs:{id:"复杂度介绍图标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#复杂度介绍图标"}},[r._v("#")]),r._v(" 复杂度介绍图标")]),r._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/2/22/16913f0d5fb66d79?w=990&h=525&f=png&s=115214",alt:""}})]),r._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/2/22/16913f3a8111fb02?w=794&h=398&f=png&s=34321",alt:""}})]),r._v(" "),t("h2",{attrs:{id:"链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[r._v("#")]),r._v(" 链表")]),r._v(" "),t("p",[r._v("优点")]),r._v(" "),t("ul",[t("li",[r._v("一个"),t("strong",[r._v("链表")]),r._v("是数据元素的线性集合")]),r._v(" "),t("li",[r._v("每个元素指向下一个元素")]),r._v(" "),t("li",[r._v("这种结构允许在迭代期间有效地从序列中的任何位置插入或删除元素（没有索引所以对其他数据不会有影响）\n缺点")]),r._v(" "),t("li",[r._v("访问时间是线性的（"),t("strong",[r._v("难以管道化？？")]),r._v("）")]),r._v(" "),t("li",[r._v("更快的访问，如随机访问，是不可行的。与链表相比，数组具有更好的缓存位置")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v('function ListNode(x){\n    this.val = x;\n    this.next = null;\n}\n链表数据结构\n{\n\t"val": 1,\n\t"next": {\n\t\t"val": 2,\n\t\t"next": {\n\t\t\t"val": 3,\n\t\t\t"next": null\n\t\t}\n\t}\n}\n')])])]),t("h2",{attrs:{id:"双向链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双向链表"}},[r._v("#")]),r._v(" 双向链表")]),r._v(" "),t("p",[r._v("优点")]),r._v(" "),t("ul",[t("li",[r._v("由一组称为节点的顺序链接记录组成的链接数据结构")]),r._v(" "),t("li",[r._v("它可以被概念化为两个由相同数据项组成的单链表，但顺序相反")]),r._v(" "),t("li",[r._v("两个节点链接允许在任一方向上遍历列表")])]),r._v(" "),t("p",[r._v("缺点")]),r._v(" "),t("ul",[t("li",[r._v("添加或者删除节点时,需做的链接更改要比单向链表复杂得多")])]),r._v(" "),t("h1",{attrs:{id:"排序算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#排序算法"}},[r._v("#")]),r._v(" 排序算法")]),r._v(" "),t("blockquote",[t("p",[r._v("常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等")])]),r._v(" "),t("h2",{attrs:{id:"冒泡排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[r._v("#")]),r._v(" 冒泡排序")]),r._v(" "),t("ol",[t("li",[r._v("比较相邻的元素。如果第一个比第二个大，就交换他们两个。")]),r._v(" "),t("li",[r._v("对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。")]),r._v(" "),t("li",[r._v("针对所有的元素重复以上的步骤，除了最后一个。")]),r._v(" "),t("li",[r._v("持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。")])]),r._v(" "),t("p",[r._v("当输入的数据已经是正序时最快")]),r._v(" "),t("p",[r._v("当输入的数据是反序时最慢")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("function bubbleSort(arr) {\n    var len = arr.length;\n    for (var i = 0; i < len - 1; i++) {\n        for (var j = 0; j < len - 1 - i; j++) {\n            var flag = true;\n            num++\n            if (arr[j] > arr[j + 1]) { // 相邻元素两两对比\n                flag = false;\n                var temp = arr[j + 1]; // 元素交换\n                arr[j + 1] = arr[j];\n                arr[j] = temp;\n            }\n            if (flag) break;\n        }\n    }\n    return arr;\n}\n")])])]),t("p",[r._v("时间复杂度：O(n^2)\n空间复杂度：O(1)")]),r._v(" "),t("h2",{attrs:{id:"选择排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择排序"}},[r._v("#")]),r._v(" 选择排序")]),r._v(" "),t("ol",[t("li",[r._v("首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置")]),r._v(" "),t("li",[r._v("再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。")]),r._v(" "),t("li",[r._v("重复第二步，直到所有元素均排序完毕。")])]),r._v(" "),t("p",[r._v("时间复杂度：O(n^2)")]),r._v(" "),t("p",[r._v("空间复杂度：O(1)")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("/**\n * 选择排序法\n * @param {Array} arr\n * 每次遍历余下的所有数据，将最小的值放到新的数组中\n */\nfunction selectionSort(arr) {\n  let temp,minIndex;\n  for (let i = 0; i < arr.length - 1; i++) {\n    minIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n        if(arr[j]<arr[minIndex]){\n            minIndex = j;\n        }\n    }\n    // 获取了最小值的索引\n    temp = arr[i]\n    arr[i] = arr[minIndex];\n    arr[minIndex] = temp;\n  }\n  return arr;\n}\n")])])]),t("h2",{attrs:{id:"插入排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插入排序"}},[r._v("#")]),r._v(" 插入排序")]),r._v(" "),t("ol",[t("li",[r._v("将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。")]),r._v(" "),t("li",[r._v("从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）")])]),r._v(" "),t("p",[r._v("性能和冒泡排序法一样，是一种优化排序算法")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("function insertionSort(arr) {\n  // 前一个值得索引和当前排序的值\n  let preIndex, current; \n  for (let i = 1; i < arr.length; i++) {\n    preIndex = i - 1;\n    current = arr[i];\n    // 当前选中的值依次和前一个值进行比较\n    while (current < arr[preIndex] && preIndex >= 0) {\n      // 如果小于前一个值，则前一个值往后移动一位\n      arr[preIndex + 1] = arr[preIndex];\n      preIndex--;\n    }\n    // 直到当前值大于比较值，或者索引为0\n    // 将当前值插入到该索引位置\n    arr[preIndex + 1] = current;\n  }\n  return arr;\n}\n")])])]),t("h2",{attrs:{id:"希尔排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#希尔排序"}},[r._v("#")]),r._v(" 希尔排序")]),r._v(" "),t("p",[r._v("一种针对插入排序的优化排序算法")]),r._v(" "),t("blockquote",[t("p",[r._v("希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。")])]),r._v(" "),t("ol",[t("li",[r._v("选择一个增量序列 t1，t2，……，tk，其中 ti > tj, tk = 1；")]),r._v(" "),t("li",[r._v("按增量序列个数 k，对序列进行 k 趟排序；")]),r._v(" "),t("li",[r._v("每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("function shellSort(arr) {\n    // 先定义一个步长\n    let gap = ~~(arr.length / 2);\n    // 以这个步长进行插入排序\n    for (gap; gap > 0; gap = ~~(gap / 2)) {\n        // 每次排序完步长减半直到步长为1结束\n        for (var i = gap; i < arr.length; i++) {\n            const temp = arr[i];\n            for (var j = i - gap; j >= 0 && arr[j] > temp; j -= gap) {\n                // 如果满足j就向前移动gap个索引\n                console.log(111);\n                \n                arr[j + gap] = arr[j];\n            }\n            // 找到了不满足条件的索引的位置，在该位置前一项进行插入操作\n            arr[j + gap] = temp;\n        }\n    }\n    return arr;\n}\n")])])]),t("h2",{attrs:{id:"归并排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#归并排序"}},[r._v("#")]),r._v(" 归并排序")]),r._v(" "),t("p",[r._v("将两个（或两个以上）有序表合并成一个新的有序表\n先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。")]),r._v(" "),t("p",[r._v("算法实现")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("function mergeSort(arr) {\n    let len = arr.length;\n    if (len == 1) return arr;\n    let l = arr.slice(0, len / 2);\n    let r = arr.slice(len / 2, len)\n    return merge(mergeSort(l), mergeSort(r));\n}\n\nfunction merge(l, r) {\n    // 合并两个有序数据\n    let tempArr = [];\n    while (l.length > 0 && r.length > 0) {\n        let val;\n        if (l[0] > r[0]) {\n            val = r.shift();\n        } else {\n            val = l.shift();\n\n        }\n        tempArr.push(val);\n    }\n    // 将剩余的数据一次性添加到最后\n    tempArr.push(...l.length > 0 ? l : r);\n    return tempArr;\n}\n")])])]),t("h2",{attrs:{id:"快速排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#快速排序"}},[r._v("#")]),r._v(" 快速排序")]),r._v(" "),t("ol",[t("li",[r._v("从数列中挑出一个元素，称为 “基准”（pivot）;")]),r._v(" "),t("li",[r._v("重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；")]),r._v(" "),t("li",[r._v("递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；")])]),r._v(" "),t("p",[r._v("递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。")]),r._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/2/22/16914725a860361a?w=811&h=252&f=png&s=12596",alt:""}})]),r._v(" "),t("p",[r._v("算法实现")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("function quickSort(arr, left, right) {\n    var len = arr.length,\n        partitionIndex,\n        // left默认从0开始，right默认从末尾开始\n        left = typeof left != 'number' ? 0 : left,\n        right = typeof right != 'number' ? len - 1 : right;\n\n    if (left < right) {\n        // 获取基准值的索引\n        partitionIndex = partition(arr, left, right);\n        quickSort(arr, left, partitionIndex - 1);\n        quickSort(arr, partitionIndex + 1, right);\n    }\n    // 操作的是同一个数组，所以最后只要把这个数组return出来\n    return arr;\n}\n\nfunction partition(arr, left, right) { // 分区操作\n    var pivot = left, // 设定基准值（pivot）\n        // 小于基准的索引，只有当发现有值小于基准才会与其交换\n        // 这样保证，基准左边的值比基准都要小\n        index = pivot + 1;\n    for (var i = index; i <= right; i++) {\n        // 如果小于基准值\n        let arrI = arr[i];\n        let arrP = arr[pivot];\n        if (arr[i] < arr[pivot]) {\n            // 应该被放到基准值的左边\n            //i 为从左开始，当前遍历到的点\n            // index 为基准值的后一位\n            swap(arr, i, index);\n            index++;\n        }\n    }\n    // 最后将基准与最后一位找到的小于基准的值进行交换\n    swap(arr, pivot, index - 1);\n    return index - 1;\n}\n// 进行数组的索引交换\nfunction swap(arr, i, j) {\n    var temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n")])])]),t("h2",{attrs:{id:"堆排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆排序"}},[r._v("#")]),r._v(" 堆排序")]),r._v(" "),t("ol",[t("li",[r._v("将无需序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆;")]),r._v(" "),t("li",[r._v('将堆顶元素与末尾元素交换，将最大元素"沉"到数组末端;')]),r._v(" "),t("li",[r._v("重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序。")])]),r._v(" "),t("p",[r._v("一般升序采用大顶堆，降序采用小顶堆\n大顶堆：arr[i] >= arr[2i+1] && arr[i] >= arr[2i+2]"),t("br"),r._v("\n小顶堆：arr[i] <= arr[2i+1] && arr[i] <= arr[2i+2]"),t("br"),r._v("\nhttp://www.cnblogs.com/chengxiao/p/6129630.html")]),r._v(" "),t("h2",{attrs:{id:"桶排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#桶排序"}},[r._v("#")]),r._v(" 桶排序")]),r._v(" "),t("ol",[t("li",[t("p",[r._v("什么时候最快->\n当输入的数据可以均匀的分配到每一个桶中。")])]),r._v(" "),t("li",[t("p",[r._v("什么时候最慢->\n当输入的数据被分配到了同一个桶中。")])])]),r._v(" "),t("p",[r._v("算法实现")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("function bucketSort(arr, bucketSize) {\n    if (arr.length === 0) {\n        return arr;\n    }\n\n    var i;\n    var minValue = arr[0];\n    var maxValue = arr[0];\n    for (i = 1; i < arr.length; i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i]; // 输入数据的最小值\n        } else if (arr[i] > maxValue) {\n            maxValue = arr[i]; // 输入数据的最大值\n        }\n    }\n\n    //桶的初始化\n    var DEFAULT_BUCKET_SIZE = 5; // 设置桶的默认数量为5\n    // 一个桶的容积\n    bucketSize = bucketSize || DEFAULT_BUCKET_SIZE;\n    // 利用最大值和最小的差计算出最多需要几个桶\n    // 计算出需要几个桶\n    var bucketCount = Math.floor((maxValue - minValue) / bucketSize) + 1;\n    // 初始化桶数组\n    var buckets = new Array(bucketCount);\n    for (i = 0; i < buckets.length; i++) {\n        buckets[i] = [];\n    }\n\n    //利用映射函数将数据分配到各个桶中\n    // (排序数组-最小值)/桶的个数\n    // 将数据依次放到每个桶中\n    // 根据桶的索引桶里的数据依次增大\n    for (i = 0; i < arr.length; i++) {\n        // 计算出当前值应该放在第几个桶中\n        buckets[Math.floor((arr[i] - minValue) / bucketSize)].push(arr[i]);\n    }\n\n    arr.length = 0;\n    for (i = 0; i < buckets.length; i++) {\n        insertionSort(buckets[i]); // 对每个桶进行排序，这里使用了插入排序\n        for (var j = 0; j < buckets[i].length; j++) {\n            // 将每个桶按照索引拼接在一起\n            arr.push(buckets[i][j]);\n        }\n    }\n    return arr;\n}\n\nfunction insertionSort(arr) {\n    var len = arr.length;\n    var preIndex, current;\n    for (var i = 1; i < len; i++) {\n        preIndex = i - 1;\n        current = arr[i];\n        while (preIndex >= 0 && arr[preIndex] > current) {\n            arr[preIndex + 1] = arr[preIndex];\n            preIndex--;\n        }\n        arr[preIndex + 1] = current;\n    }\n    return arr;\n}\n")])])]),t("h2",{attrs:{id:"基数排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基数排序"}},[r._v("#")]),r._v(" 基数排序")]),r._v(" "),t("p",[r._v("思路：")]),r._v(" "),t("ol",[t("li",[r._v("桶按照从小到大排序，每次位数排序的时候，当前位数，先被倒出的数一定小于后被倒出的数")]),r._v(" "),t("li",[r._v("按照这个思路进行排序")]),r._v(" "),t("li",[r._v("第一次，小于10的数被按照从小到大的顺序穿插在数组中")]),r._v(" "),t("li",[r._v("第二次，小于100的数，被顺序排列")]),r._v(" "),t("li",[r._v("最终所有的数都会被顺序排列")])]),r._v(" "),t("p",[r._v("算法实现")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("//LSD Radix Sort\nvar counter = [];\n\nfunction radixSort(arr, maxDigit = 9) {\n    debugger\n    var mod = 10;\n    var dev = 1;\n    // maxDigit数组中最大值的位数\n    for (var i = 0; i < maxDigit; i++, dev *= 10, mod *= 10) {\n        for (var j = 0; j < arr.length; j++) {\n            // 第一次取个位的值\n            // 第二次取十位的值\n            // 以此类推\n            var bucket = parseInt((arr[j] % mod) / dev);\n            if (counter[bucket] == null) {\n                counter[bucket] = [];\n            }\n            // 依据个位的值依次将数组中的每个值放到桶中\n            counter[bucket].push(arr[j]);\n        }\n        var pos = 0;\n        // 依次将每个桶中的数据，按照队列的形式倒出\n        for (var j = 0; j < counter.length; j++) {\n            var value = null;\n            if (counter[j] != null) {\n                while ((value = counter[j].shift()) != null) {\n                    arr[pos++] = value;\n                }\n            }\n        }\n\n        console.log(arr);\n        \n    }\n    return arr;\n}\n")])])]),t("h1",{attrs:{id:"常见算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见算法"}},[r._v("#")]),r._v(" 常见算法")]),r._v(" "),t("h2",{attrs:{id:"贪心算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法"}},[r._v("#")]),r._v(" 贪心算法")]),r._v(" "),t("p",[r._v("在对问题求解时，总是做出在当前看来是最好的选择。")]),r._v(" "),t("p",[r._v("不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。")]),r._v(" "),t("h2",{attrs:{id:"分治算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分治算法"}},[r._v("#")]),r._v(" 分治算法")]),r._v(" "),t("p",[r._v("分治算法的基本思想是将一个规模为N的问题分解为K个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解。")]),r._v(" "),t("h3",{attrs:{id:"分治法解题的一般步骤："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分治法解题的一般步骤："}},[r._v("#")]),r._v(" 分治法解题的一般步骤：")]),r._v(" "),t("ol",[t("li",[r._v("分解，将要解决的问题划分成若干规模较小的同类问题；")]),r._v(" "),t("li",[r._v("求解，当子问题划分得足够小时，用较简单的方法解决；")]),r._v(" "),t("li",[r._v("合并，按原问题的要求，将子问题的解逐层合并构成原问题的解。")])]),r._v(" "),t("h2",{attrs:{id:"动态规划"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[r._v("#")]),r._v(" 动态规划")]),r._v(" "),t("p",[r._v("动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。")]),r._v(" "),t("p",[t("strong",[r._v("与分治法最大的差别是")]),r._v("：适合于用动态规划法求解的问题，经分解后得到的"),t("strong",[r._v("子问题往往不是互相独立的")]),r._v("（即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解）")]),r._v(" "),t("h2",{attrs:{id:"回溯法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回溯法"}},[r._v("#")]),r._v(" 回溯法")]),r._v(" "),t("p",[r._v("回溯法（探索与回溯法）是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。")]),r._v(" "),t("h3",{attrs:{id:"基本思想："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本思想："}},[r._v("#")]),r._v(" 基本思想：")]),r._v(" "),t("p",[r._v("回溯法在问题的解空间树中，按深度优先策略，从根结点出发搜索解空间树。算法搜索至解空间树的任意一点时，先判断该结点是否包含问题的解。如果肯定不包含（剪枝过程），则跳过对该结点为根的子树的搜索，逐层向其祖先结点回溯；否则，进入该子树，继续按深度优先策略搜索。\n回溯法就是对隐式图的深度优先搜索算法\n回溯法：为了避免生成那些不可能产生最佳解的问题状态，要不断地利用限界函数(bounding function)来处死(剪枝)那些实际上不可能产生所需解的活结点，以减少问题的计算量。具有限界函数的深度优先生成法称为回溯法。（回溯法 = 穷举 +　剪枝）")]),r._v(" "),t("h3",{attrs:{id:"一般步骤："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一般步骤："}},[r._v("#")]),r._v(" 一般步骤：")]),r._v(" "),t("p",[r._v("(1)针对所给问题，定义问题的解空间；\n(2)确定易于搜索的解空间结构；\n(3)以深度优先方式搜索解空间，并在搜索过程中用剪枝函数避免无效搜索。")]),r._v(" "),t("h3",{attrs:{id:"两个常用的剪枝函数："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#两个常用的剪枝函数："}},[r._v("#")]),r._v(" 两个常用的剪枝函数：")]),r._v(" "),t("p",[r._v("(1)约束函数：在扩展结点处减去不满足约束的子数\n(2)限界函数：减去得不到最优解的子树")]),r._v(" "),t("p",[r._v("用回溯法解题的一个显著特征是在搜索过程中动态产生问题的解空间。在任何时刻，算法只保存从根结点到当前扩展结点的路径。如果解空间树中从根结点到叶结点的最长路径的长度为h(n)，则回溯法所需的计算空间通常为O(h(n))。而显式地存储整个解空间则需要O(2^h(n))或O(h(n)!)内存空间。")]),r._v(" "),t("h2",{attrs:{id:"分支限界法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支限界法"}},[r._v("#")]),r._v(" 分支限界法")]),r._v(" "),t("p",[r._v("https://www.cnblogs.com/fengty90/p/3768843.html")])])}),[],!1,null,null,null);n.default=e.exports}}]);