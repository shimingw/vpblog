(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{272:function(e,a,t){"use strict";t.r(a);var r=t(2),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"three-js-学习笔记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#three-js-学习笔记"}},[e._v("#")]),e._v(" three.js 学习笔记")]),e._v(" "),t("p",[e._v("日期：2018-6-5")]),e._v(" "),t("h3",{attrs:{id:"三大组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三大组件"}},[e._v("#")]),e._v(" 三大组件")]),e._v(" "),t("p",[e._v("场景（scene）、相机（camera）和渲染器（renderer）。有了这三样东西，才能将物体渲染到网页中去。")]),e._v(" "),t("p",[e._v("场景和相机代表了3D观察空间和数据模型，渲染器则包含了WebGL绘图上下文和着色器。")]),e._v(" "),t("h3",{attrs:{id:"场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[e._v("#")]),e._v(" 场景")]),e._v(" "),t("p",[e._v("场景就只有一种")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var scene = new THREE.Scene();\n")])])]),t("h3",{attrs:{id:"相机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相机"}},[e._v("#")]),e._v(" 相机")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('透视相机，也就是类似于人眼观察的方式\n\nPerspectiveCamera("field of view", "aspect ratio", "near clipping plane", "far clipping plane")\t\n\n')])])]),t("h3",{attrs:{id:"渲染器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染器"}},[e._v("#")]),e._v(" 渲染器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement)\n\n染器renderer的domElement元素，表示渲染器中的画布，所有的渲染都是画在domElement上的，所以这里的appendChild表示将这个domElement挂接在body下面，这样渲染的结果就能够在页面中显示了。\n")])])]),t("h3",{attrs:{id:"添加物体到场景中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加物体到场景中"}},[e._v("#")]),e._v(" 添加物体到场景中")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var geometry = new THREE.CubeGeometry(1,1,1); \t//盒子模型\nvar material = new THREE.MeshBasicMaterial({color: 0x00ff00});\t//材料着色\nvar cube = new THREE.Mesh(geometry, material); \t\nscene.add(cube);\n\nCubeGeometry(width, height, depth, segmentsWidth, segmentsHeight, segmentsDepth, materials, sides)\nwidth：立方体x轴的长度\nheight：立方体y轴的长度\ndepth：立方体z轴的深度，也就是长度\n")])])]),t("h3",{attrs:{id:"渲染"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染"}},[e._v("#")]),e._v(" 渲染")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("renderer.render(scene, camera);\n\n渲染函数的原型如下：\nrender( scene, camera, renderTarget, forceClear )\n\nscene：前面定义的场景\ncamera：前面定义的相机\nrenderTarget：渲染的目标，默认是渲染到前面定义的render变量中\nforceClear：每次绘制之前都将画布的内容给清除，即使自动清除标志autoClear为false，也会清除。\n")])])]),t("h3",{attrs:{id:"渲染循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染循环"}},[e._v("#")]),e._v(" 渲染循环")])])}),[],!1,null,null,null);a.default=s.exports}}]);